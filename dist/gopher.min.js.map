{"version":3,"sources":["webpack:///webpack/bootstrap","webpack:///./src/gopher.svg","webpack:///./node_modules/svgjs/dist/svg.js","webpack:///./src/index.js"],"names":["installedModules","__webpack_require__","moduleId","exports","module","i","l","modules","call","m","c","d","name","getter","o","Object","defineProperty","configurable","enumerable","get","r","value","n","__esModule","object","property","prototype","hasOwnProperty","p","s","__WEBPACK_AMD_DEFINE_RESULT__","root","window","this","undefined","document","SVG","element","supported","Doc","parser","draw","prepare","ns","xmlns","xlink","svgjs","createElementNS","createSVGRect","did","eid","capitalize","create","setAttribute","extend","methods","key","slice","arguments","pop","length","Set","inherit","invent","config","initializer","constructor","construct","parent","Container","adopt","node","instance","nodeName","parentNode","SVGElement","Nested","Gradient","Element","type","namespace","defs","setData","JSON","parse","getAttribute","body","getElementsByTagName","documentElement","nested","size","style","poly","polyline","path","native","addEventListener","regex","numberAndUnit","hex","rgb","reference","transforms","whitespace","isHex","isRgb","isCss","isBlank","isNumber","isPercent","isImage","delimiter","hyphen","pathLetters","isPathLetter","numbersWithDots","dots","utils","map","array","block","il","result","push","filter","radians","Math","PI","degrees","filterSVGElements","nodes","el","defaults","attrs","fill-opacity","stroke-opacity","stroke-width","stroke-linejoin","stroke-linecap","fill","stroke","opacity","x","y","cx","cy","width","height","rx","ry","offset","stop-opacity","stop-color","font-size","font-family","text-anchor","Color","color","match","g","b","test","exec","replace","parseInt","substring","join","toString","toHex","compToHex","toRgb","brightness","morph","destination","at","pos","isColor","Array","fallback","valueOf","lastValue","lastDestination","settle","seen","indexOf","isArray","split","string","trim","parseFloat","reverse","clone","array_clone","arr","PointArray","toLine","x1","y1","x2","y2","points","len","move","box","bbox","isNaN","getBBox","pathHandlers","M","p0","L","H","V","C","S","Q","T","Z","A","mlhvqtcsa","j","jl","toUpperCase","PathArray","a","arrayToString","equalCommands","pathArray","sourceArray","destinationArray","paramCnt","pathRegReplace","reduce","prev","curr","concat","Point","index","Number","unit","isFinite","toJSON","plus","number","minus","times","divide","to","relative","_stroke","_event","dom","attr","center","proportionalSize","withData","writeDataToDom","assignNewId","childNodes","id","cloneNode","add","after","remove","removeElement","addTo","put","putIn","inside","show","hide","visible","classes","hasClass","addClass","removeClass","toggleClass","matches","doc","parents","selector","matchesSelector","msMatchesSelector","mozMatchesSelector","webkitMatchesSelector","oMatchesSelector","svg","well","createElement","Parent","appendChild","innerHTML","firstChild","each","lines","fn","removeAttribute","keys","stringify","is","obj","easing","-","<>","cos",">","sin","<","from","MorphObj","Situation","init","reversed","reversing","duration","delay","start","Date","finish","ease","loop","loops","animations","styles","once","FX","_target","situations","active","situation","paused","lastPos","absPos","_speed","animate","queue","target","timeToAbsPos","timestamp","absPosToTime","startAnimFrame","stopAnimFrame","animationFrame","requestAnimationFrame","step","bind","cancelAnimationFrame","startCurrent","initAnimations","shift","dequeue","stop","source","initialTransformation","matrixify","clearQueue","clearCurrent","jumpToEnd","atEnd","reset","temp","atStart","isAbsPos","durDivSpd","speed","pause","last","play","progress","easeIt","on","wrapper","e","detail","off","_callStart","during","eased","afterAll","duringAll","method","args","ignoreTime","absPosInt","lastLoop","max","floor","Boolean","min","fire","fx","eachAt","self","apply","Matrix","multiply","undo","extract","matrix","isEased","setTimeout","real","v","G","transform","num","Text","plot","leading","viewbox","ViewBox","update","Stop","Box","left","top","fullBox","merge","xMin","Infinity","xMax","yMin","yMax","pts","forEach","BBox","contains","Exception","topParent","Shape","clientLeft","clientTop","clientWidth","clientHeight","tbox","console","warn","rbox","RBox","getBoundingClientRect","addOffset","pageXOffset","pageYOffset","screenCTM","inverse","base","arrayToMatrix","abcdef","px","deltaTransformPoint","py","skewX","atan2","f","transformedX","sqrt","transformedY","skewY","scaleX","scaleY","rotation","parseMatrix","translate","scale","around","rotate","flip","skew","tan","createSVGMatrix","ctm","getCTM","rect","getScreenCTM","point","createSVGPoint","matrixTransform","attributes","nodeValue","image","Image","pattern","setAttributeNS","rebuild","ensureCentre","Rotate","Scale","Skew","Translate","untransform","str","kv","toParent","pCtm","toDoc","Transformation","inversed","params","_undo","cssText","camelCase","children","insertBefore","has","first","deep","removeChild","clear","hasChildNodes","lastChild","_defs","ungroup","depth","Defs","flatten","view","we","he","wm","hm","reg","offsetWidth","offsetHeight","zoom","event","listeners","handlerMap","listenerId","listener","binding","options","ev","_svgjsListenerId","removeEventListener","data","Event","dispatchEvent","CustomEvent","cancelable","gbox","trans","group","siblings","position","next","previous","forward","backward","front","back","before","Mask","targets","unmask","mask","maskWith","masker","ClipPath","unclip","clip","clipWith","clipper","gradient","fy","Pattern","patternUnits","getElementById","version","spof","Bare","words","text","createTextNode","Symbol","symbol","Use","file","use","Rect","Circle","circle","Ellipse","ellipse","Line","line","Polyline","Polygon","polygon","_array","morphArray","Path","load","url","img","_loaded","ratio","_error","src","loaded","error","_rebuild","_build","oy","nodeType","newLined","textContent","build","tspan","newLine","textPath","blankLineOffset","dy","plain","Tspan","dx","t","getComputedTextLength","TextPath","track","link","linkTo","Marker","ref","marker","sugar","prefix","toLowerCase","charAt","comp","w","h","extension","dmove","radius","getTotalLength","pointAt","getPointAtLength","font","members","elements","splice","set","remember","k","memory","forget","_memory","idFromReference","select","query","querySelectorAll","bubbles","createEvent","initCustomEvent","lastTime","vendors","callback","currTime","getTime","timeToCall","clearTimeout","factory","randomRange","random","Gopher","visibility","drawing","title","className","offsetLeft","offsetTop","svgjs__WEBPACK_IMPORTED_MODULE_0___default","_gopher_svg__WEBPACK_IMPORTED_MODULE_1___default","gopher","rightEye","rightPupil","leftEye","leftPupil","leftReflection","rightReflection","rightHand","staring","llEyelid","ulEyelid","lrEyelid","urEyelid","stare","handleMouseMove","startWave","startTwitch","startBlink","twitch","blink","lx","ly","resetBlinkTimer","moveEyes","wave","hand","handX","handY","localX","pageX","localY","pageY","abs","targetX","targetY","dur","lcx","lcy","ldx","ldy","ll","lnx","lny","rcx","rcy","rdx","rdy","rl","rnx","rny","moveEyesTimeout","moveEyesRandomly","randomAngle","randomRadius","twitchTimeout","blinkTimeout","waveTimeout","waveDelay","querySelector"],"mappings":"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","file":"gopher.min.js","sourcesContent":[" \t// The module cache\n \tvar installedModules = {};\n\n \t// The require function\n \tfunction __webpack_require__(moduleId) {\n\n \t\t// Check if module is in cache\n \t\tif(installedModules[moduleId]) {\n \t\t\treturn installedModules[moduleId].exports;\n \t\t}\n \t\t// Create a new module (and put it into the cache)\n \t\tvar module = installedModules[moduleId] = {\n \t\t\ti: moduleId,\n \t\t\tl: false,\n \t\t\texports: {}\n \t\t};\n\n \t\t// Execute the module function\n \t\tmodules[moduleId].call(module.exports, module, module.exports, __webpack_require__);\n\n \t\t// Flag the module as loaded\n \t\tmodule.l = true;\n\n \t\t// Return the exports of the module\n \t\treturn module.exports;\n \t}\n\n\n \t// expose the modules object (__webpack_modules__)\n \t__webpack_require__.m = modules;\n\n \t// expose the module cache\n \t__webpack_require__.c = installedModules;\n\n \t// define getter function for harmony exports\n \t__webpack_require__.d = function(exports, name, getter) {\n \t\tif(!__webpack_require__.o(exports, name)) {\n \t\t\tObject.defineProperty(exports, name, {\n \t\t\t\tconfigurable: false,\n \t\t\t\tenumerable: true,\n \t\t\t\tget: getter\n \t\t\t});\n \t\t}\n \t};\n\n \t// define __esModule on exports\n \t__webpack_require__.r = function(exports) {\n \t\tObject.defineProperty(exports, '__esModule', { value: true });\n \t};\n\n \t// getDefaultExport function for compatibility with non-harmony modules\n \t__webpack_require__.n = function(module) {\n \t\tvar getter = module && module.__esModule ?\n \t\t\tfunction getDefault() { return module['default']; } :\n \t\t\tfunction getModuleExports() { return module; };\n \t\t__webpack_require__.d(getter, 'a', getter);\n \t\treturn getter;\n \t};\n\n \t// Object.prototype.hasOwnProperty.call\n \t__webpack_require__.o = function(object, property) { return Object.prototype.hasOwnProperty.call(object, property); };\n\n \t// __webpack_public_path__\n \t__webpack_require__.p = \"\";\n\n\n \t// Load entry module and return exports\n \treturn __webpack_require__(__webpack_require__.s = 2);\n\n\n\n// WEBPACK FOOTER //\n// webpack/bootstrap","module.exports = \"<?xml version=\\\"1.0\\\" encoding=\\\"utf-8\\\"?>\\r\\n<!-- Generator: Adobe Illustrator 18.1.0, SVG Export Plug-In . SVG Version: 6.00 Build 0)  -->\\r\\n<svg version=\\\"1.1\\\" id=\\\"Gopher\\\" xmlns=\\\"http://www.w3.org/2000/svg\\\" xmlns:xlink=\\\"http://www.w3.org/1999/xlink\\\" x=\\\"0px\\\" y=\\\"0px\\\"\\r\\n\\t viewBox=\\\"0 0 215.6 281.6\\\" enable-background=\\\"new 0 0 215.6 281.6\\\" xml:space=\\\"preserve\\\">\\r\\n<g>\\r\\n\\t<path fill=\\\"#8CC5E7\\\" d=\\\"M207.3,44.6c-6.7-13.7-22.9-1.6-27-5.9c-21-21.6-46.4-27-66.3-28c0,0-9,0-11,0c-20,0.5-45.4,6.3-66.3,28\\r\\n\\t\\tc-4.1,4.3-20.4-7.8-27,5.9c-7.7,16,15.7,17.6,14.5,24.7c-2.3,12.8-0.8,31.8,1,50.5C28,151.5,4.3,227.4,53.6,257.9\\r\\n\\t\\tc9.3,5.8,34.4,9,56.2,9.5l0,0c0,0,0.1,0,0.1,0c0,0,0.1,0,0.1,0l0,0c21.8-0.5,43.9-3.7,53.2-9.5c49.4-30.5,25.7-106.4,28.6-138.1\\r\\n\\t\\tc1.7-18.7,3.2-37.7,1-50.5C191.6,62.2,215,60.5,207.3,44.6z\\\"/>\\r\\n\\t<g>\\r\\n\\t\\t<path id=\\\"rightsocket\\\" fill=\\\"#E0DEDC\\\" d=\\\"M143.2,54.3c-33.4,3.9-28.9,38.7-16,50c24,21,49,0,46.2-21.2C170.9,62.7,153.6,53.1,143.2,54.3z\\\"/>\\r\\n\\t\\t<circle id=\\\"rightpupil\\\" fill=\\\"#111212\\\" cx=\\\"145.5\\\" cy=\\\"84.3\\\" r=\\\"11.4\\\"/>\\r\\n\\t\\t<circle id=\\\"rightreflection\\\" fill=\\\"#FFFFFF\\\" cx=\\\"142.5\\\" cy=\\\"79.4\\\" r=\\\"3.6\\\"/>\\r\\n\\t</g>\\r\\n\\t<g>\\r\\n\\t\\t<path fill=\\\"#B8937F\\\" d=\\\"M108.5,107c-16,2.4-21.7,7-20.5,14.2c2,11.8,39.7,10.5,40.9,0.6C129.9,113.3,114.8,106.1,108.5,107z\\\"/>\\r\\n\\t\\t<path d=\\\"M98.2,111.8c-2.7,9.8,21.7,8.3,21.1,2c-0.3-3.7-3.6-8.4-12.3-8.2C103.6,105.7,99.4,107.2,98.2,111.8z\\\"/>\\r\\n\\t\\t<path fill=\\\"#E0DEDC\\\" d=\\\"M99,127.7c-0.9,0.4-2.4,10.2,2.2,10.7c3.1,0.3,11.6,1.3,13.6,0c3.9-2.5,3.5-8.5,1.3-10\\r\\n\\t\\t\\tC112.4,126,100,127.2,99,127.7z\\\"/>\\r\\n\\t</g>\\r\\n\\t<g>\\r\\n\\t\\t<path id=\\\"leftsocket\\\" fill=\\\"#E0DEDC\\\" d=\\\"M73.6,54.3c33.4,3.9,28.9,38.7,16,50c-24,21-49,0-46.2-21.2C46,62.7,63.3,53.1,73.6,54.3z\\\"/>\\r\\n\\t\\t<circle id=\\\"leftpupil\\\" fill=\\\"#111212\\\" cx=\\\"71.4\\\" cy=\\\"84.3\\\" r=\\\"11.4\\\"/>\\r\\n\\t\\t<circle id=\\\"leftreflection\\\" fill=\\\"#FFFFFF\\\" cx=\\\"74.4\\\" cy=\\\"79.4\\\" r=\\\"3.6\\\"/>\\r\\n\\t</g>\\r\\n\\t<path id=\\\"righthand\\\" fill=\\\"#B8937F\\\" d=\\\"M193.6,186.7c11,0.1,5.6-23.5-1.2-18.8c-3.3,2.3-3.9,7.6-3.9,12.1C188.5,182.5,190.5,186.6,193.6,186.7z\\\"/>\\r\\n\\t<path fill=\\\"#B8937F\\\" d=\\\"M23.3,186.7c-11,0.1-5.6-23.5,1.2-18.8c3.3,2.3,3.9,7.6,3.9,12.1C28.4,182.5,26.4,186.6,23.3,186.7z\\\"/>\\r\\n\\t<path fill=\\\"#B8937F\\\" d=\\\"M172.7,259.2c-6-8.9-11.4-2-20.1,2.4c-4.1,2.1,6.8,9.6,19,4C174.8,264.1,174.7,262.1,172.7,259.2z\\\"/>\\r\\n\\t<path fill=\\\"#B8937F\\\" d=\\\"M44.2,260.2c6-8.9,11.4-2,20.1,2.4c4.1,2.1-6.8,9.6-19,4C42.1,265.1,42.2,263.1,44.2,260.2z\\\"/>\\r\\n\\t<path fill=\\\"#3C89BF\\\" d=\\\"M188.6,47c-0.6,2.1,2.1,1.8,3.1,8.3c0.4,2.4,9-3.5,5.5-7.8C194.3,43.9,189.1,44.9,188.6,47z\\\"/>\\r\\n\\t<path fill=\\\"#3C89BF\\\" d=\\\"M28.3,47c0.6,2.1-2.1,1.8-3.1,8.3c-0.4,2.4-9-3.5-5.5-7.8C22.5,43.9,27.7,44.9,28.3,47z\\\"/>\\r\\n</g>\\r\\n</svg>\\r\\n\"\n\n\n//////////////////\n// WEBPACK FOOTER\n// ./src/gopher.svg\n// module id = 0\n// module chunks = 0","/*!\n* svg.js - A lightweight library for manipulating and animating SVG.\n* @version 2.6.2\n* https://svgdotjs.github.io/\n*\n* @copyright Wout Fierens <wout@mick-wout.com>\n* @license MIT\n*\n* BUILT: Mon Jun 05 2017 11:33:23 GMT+0200 (Mitteleuropäische Sommerzeit)\n*/;\n(function(root, factory) {\r\n  /* istanbul ignore next */\r\n  if (typeof define === 'function' && define.amd) {\r\n    define(function(){\r\n      return factory(root, root.document)\r\n    })\r\n  } else if (typeof exports === 'object') {\r\n    module.exports = root.document ? factory(root, root.document) : function(w){ return factory(w, w.document) }\r\n  } else {\r\n    root.SVG = factory(root, root.document)\r\n  }\r\n}(typeof window !== \"undefined\" ? window : this, function(window, document) {\r\n\r\n// The main wrapping element\r\nvar SVG = this.SVG = function(element) {\r\n  if (SVG.supported) {\r\n    element = new SVG.Doc(element)\r\n\r\n    if(!SVG.parser.draw)\r\n      SVG.prepare()\r\n\r\n    return element\r\n  }\r\n}\r\n\r\n// Default namespaces\r\nSVG.ns    = 'http://www.w3.org/2000/svg'\r\nSVG.xmlns = 'http://www.w3.org/2000/xmlns/'\r\nSVG.xlink = 'http://www.w3.org/1999/xlink'\r\nSVG.svgjs = 'http://svgjs.com/svgjs'\r\n\r\n// Svg support test\r\nSVG.supported = (function() {\r\n  return !! document.createElementNS &&\r\n         !! document.createElementNS(SVG.ns,'svg').createSVGRect\r\n})()\r\n\r\n// Don't bother to continue if SVG is not supported\r\nif (!SVG.supported) return false\r\n\r\n// Element id sequence\r\nSVG.did  = 1000\r\n\r\n// Get next named element id\r\nSVG.eid = function(name) {\r\n  return 'Svgjs' + capitalize(name) + (SVG.did++)\r\n}\r\n\r\n// Method for element creation\r\nSVG.create = function(name) {\r\n  // create element\r\n  var element = document.createElementNS(this.ns, name)\r\n\r\n  // apply unique id\r\n  element.setAttribute('id', this.eid(name))\r\n\r\n  return element\r\n}\r\n\r\n// Method for extending objects\r\nSVG.extend = function() {\r\n  var modules, methods, key, i\r\n\r\n  // Get list of modules\r\n  modules = [].slice.call(arguments)\r\n\r\n  // Get object with extensions\r\n  methods = modules.pop()\r\n\r\n  for (i = modules.length - 1; i >= 0; i--)\r\n    if (modules[i])\r\n      for (key in methods)\r\n        modules[i].prototype[key] = methods[key]\r\n\r\n  // Make sure SVG.Set inherits any newly added methods\r\n  if (SVG.Set && SVG.Set.inherit)\r\n    SVG.Set.inherit()\r\n}\r\n\r\n// Invent new element\r\nSVG.invent = function(config) {\r\n  // Create element initializer\r\n  var initializer = typeof config.create == 'function' ?\r\n    config.create :\r\n    function() {\r\n      this.constructor.call(this, SVG.create(config.create))\r\n    }\r\n\r\n  // Inherit prototype\r\n  if (config.inherit)\r\n    initializer.prototype = new config.inherit\r\n\r\n  // Extend with methods\r\n  if (config.extend)\r\n    SVG.extend(initializer, config.extend)\r\n\r\n  // Attach construct method to parent\r\n  if (config.construct)\r\n    SVG.extend(config.parent || SVG.Container, config.construct)\r\n\r\n  return initializer\r\n}\r\n\r\n// Adopt existing svg elements\r\nSVG.adopt = function(node) {\r\n  // check for presence of node\r\n  if (!node) return null\r\n\r\n  // make sure a node isn't already adopted\r\n  if (node.instance) return node.instance\r\n\r\n  // initialize variables\r\n  var element\r\n\r\n  // adopt with element-specific settings\r\n  if (node.nodeName == 'svg')\r\n    element = node.parentNode instanceof window.SVGElement ? new SVG.Nested : new SVG.Doc\r\n  else if (node.nodeName == 'linearGradient')\r\n    element = new SVG.Gradient('linear')\r\n  else if (node.nodeName == 'radialGradient')\r\n    element = new SVG.Gradient('radial')\r\n  else if (SVG[capitalize(node.nodeName)])\r\n    element = new SVG[capitalize(node.nodeName)]\r\n  else\r\n    element = new SVG.Element(node)\r\n\r\n  // ensure references\r\n  element.type  = node.nodeName\r\n  element.node  = node\r\n  node.instance = element\r\n\r\n  // SVG.Class specific preparations\r\n  if (element instanceof SVG.Doc)\r\n    element.namespace().defs()\r\n\r\n  // pull svgjs data from the dom (getAttributeNS doesn't work in html5)\r\n  element.setData(JSON.parse(node.getAttribute('svgjs:data')) || {})\r\n\r\n  return element\r\n}\r\n\r\n// Initialize parsing element\r\nSVG.prepare = function() {\r\n  // Select document body and create invisible svg element\r\n  var body = document.getElementsByTagName('body')[0]\r\n    , draw = (body ? new SVG.Doc(body) : SVG.adopt(document.documentElement).nested()).size(2, 0)\r\n\r\n  // Create parser object\r\n  SVG.parser = {\r\n    body: body || document.documentElement\r\n  , draw: draw.style('opacity:0;position:absolute;left:-100%;top:-100%;overflow:hidden').node\r\n  , poly: draw.polyline().node\r\n  , path: draw.path().node\r\n  , native: SVG.create('svg')\r\n  }\r\n}\r\n\r\nSVG.parser = {\r\n  native: SVG.create('svg')\r\n}\r\n\r\ndocument.addEventListener('DOMContentLoaded', function() {\r\n  if(!SVG.parser.draw)\r\n    SVG.prepare()\r\n}, false)\r\n\n// Storage for regular expressions\r\nSVG.regex = {\r\n  // Parse unit value\r\n  numberAndUnit:    /^([+-]?(\\d+(\\.\\d*)?|\\.\\d+)(e[+-]?\\d+)?)([a-z%]*)$/i\r\n\r\n  // Parse hex value\r\n, hex:              /^#?([a-f\\d]{2})([a-f\\d]{2})([a-f\\d]{2})$/i\r\n\r\n  // Parse rgb value\r\n, rgb:              /rgb\\((\\d+),(\\d+),(\\d+)\\)/\r\n\r\n  // Parse reference id\r\n, reference:        /#([a-z0-9\\-_]+)/i\r\n\r\n  // splits a transformation chain\r\n, transforms:       /\\)\\s*,?\\s*/\r\n\r\n  // Whitespace\r\n, whitespace:       /\\s/g\r\n\r\n  // Test hex value\r\n, isHex:            /^#[a-f0-9]{3,6}$/i\r\n\r\n  // Test rgb value\r\n, isRgb:            /^rgb\\(/\r\n\r\n  // Test css declaration\r\n, isCss:            /[^:]+:[^;]+;?/\r\n\r\n  // Test for blank string\r\n, isBlank:          /^(\\s+)?$/\r\n\r\n  // Test for numeric string\r\n, isNumber:         /^[+-]?(\\d+(\\.\\d*)?|\\.\\d+)(e[+-]?\\d+)?$/i\r\n\r\n  // Test for percent value\r\n, isPercent:        /^-?[\\d\\.]+%$/\r\n\r\n  // Test for image url\r\n, isImage:          /\\.(jpg|jpeg|png|gif|svg)(\\?[^=]+.*)?/i\r\n\r\n  // split at whitespace and comma\r\n, delimiter:        /[\\s,]+/\r\n\r\n  // The following regex are used to parse the d attribute of a path\r\n\r\n  // Matches all hyphens which are not after an exponent\r\n, hyphen:           /([^e])\\-/gi\r\n\r\n  // Replaces and tests for all path letters\r\n, pathLetters:      /[MLHVCSQTAZ]/gi\r\n\r\n  // yes we need this one, too\r\n, isPathLetter:     /[MLHVCSQTAZ]/i\r\n\r\n  // matches 0.154.23.45\r\n, numbersWithDots:  /((\\d?\\.\\d+(?:e[+-]?\\d+)?)((?:\\.\\d+(?:e[+-]?\\d+)?)+))+/gi\r\n\r\n  // matches .\r\n, dots:             /\\./g\r\n}\r\n\nSVG.utils = {\r\n  // Map function\r\n  map: function(array, block) {\r\n    var i\r\n      , il = array.length\r\n      , result = []\r\n\r\n    for (i = 0; i < il; i++)\r\n      result.push(block(array[i]))\r\n\r\n    return result\r\n  }\r\n\r\n  // Filter function\r\n, filter: function(array, block) {\r\n    var i\r\n      , il = array.length\r\n      , result = []\r\n\r\n    for (i = 0; i < il; i++)\r\n      if (block(array[i]))\r\n        result.push(array[i])\r\n\r\n    return result\r\n  }\r\n\r\n  // Degrees to radians\r\n, radians: function(d) {\r\n    return d % 360 * Math.PI / 180\r\n  }\r\n\r\n  // Radians to degrees\r\n, degrees: function(r) {\r\n    return r * 180 / Math.PI % 360\r\n  }\r\n\r\n, filterSVGElements: function(nodes) {\r\n    return this.filter( nodes, function(el) { return el instanceof window.SVGElement })\r\n  }\r\n\r\n}\n\r\nSVG.defaults = {\r\n  // Default attribute values\r\n  attrs: {\r\n    // fill and stroke\r\n    'fill-opacity':     1\r\n  , 'stroke-opacity':   1\r\n  , 'stroke-width':     0\r\n  , 'stroke-linejoin':  'miter'\r\n  , 'stroke-linecap':   'butt'\r\n  , fill:               '#000000'\r\n  , stroke:             '#000000'\r\n  , opacity:            1\r\n    // position\r\n  , x:                  0\r\n  , y:                  0\r\n  , cx:                 0\r\n  , cy:                 0\r\n    // size\r\n  , width:              0\r\n  , height:             0\r\n    // radius\r\n  , r:                  0\r\n  , rx:                 0\r\n  , ry:                 0\r\n    // gradient\r\n  , offset:             0\r\n  , 'stop-opacity':     1\r\n  , 'stop-color':       '#000000'\r\n    // text\r\n  , 'font-size':        16\r\n  , 'font-family':      'Helvetica, Arial, sans-serif'\r\n  , 'text-anchor':      'start'\r\n  }\r\n\r\n}\n// Module for color convertions\r\nSVG.Color = function(color) {\r\n  var match\r\n\r\n  // initialize defaults\r\n  this.r = 0\r\n  this.g = 0\r\n  this.b = 0\r\n\r\n  if(!color) return\r\n\r\n  // parse color\r\n  if (typeof color === 'string') {\r\n    if (SVG.regex.isRgb.test(color)) {\r\n      // get rgb values\r\n      match = SVG.regex.rgb.exec(color.replace(SVG.regex.whitespace,''))\r\n\r\n      // parse numeric values\r\n      this.r = parseInt(match[1])\r\n      this.g = parseInt(match[2])\r\n      this.b = parseInt(match[3])\r\n\r\n    } else if (SVG.regex.isHex.test(color)) {\r\n      // get hex values\r\n      match = SVG.regex.hex.exec(fullHex(color))\r\n\r\n      // parse numeric values\r\n      this.r = parseInt(match[1], 16)\r\n      this.g = parseInt(match[2], 16)\r\n      this.b = parseInt(match[3], 16)\r\n\r\n    }\r\n\r\n  } else if (typeof color === 'object') {\r\n    this.r = color.r\r\n    this.g = color.g\r\n    this.b = color.b\r\n\r\n  }\r\n\r\n}\r\n\r\nSVG.extend(SVG.Color, {\r\n  // Default to hex conversion\r\n  toString: function() {\r\n    return this.toHex()\r\n  }\r\n  // Build hex value\r\n, toHex: function() {\r\n    return '#'\r\n      + compToHex(this.r)\r\n      + compToHex(this.g)\r\n      + compToHex(this.b)\r\n  }\r\n  // Build rgb value\r\n, toRgb: function() {\r\n    return 'rgb(' + [this.r, this.g, this.b].join() + ')'\r\n  }\r\n  // Calculate true brightness\r\n, brightness: function() {\r\n    return (this.r / 255 * 0.30)\r\n         + (this.g / 255 * 0.59)\r\n         + (this.b / 255 * 0.11)\r\n  }\r\n  // Make color morphable\r\n, morph: function(color) {\r\n    this.destination = new SVG.Color(color)\r\n\r\n    return this\r\n  }\r\n  // Get morphed color at given position\r\n, at: function(pos) {\r\n    // make sure a destination is defined\r\n    if (!this.destination) return this\r\n\r\n    // normalise pos\r\n    pos = pos < 0 ? 0 : pos > 1 ? 1 : pos\r\n\r\n    // generate morphed color\r\n    return new SVG.Color({\r\n      r: ~~(this.r + (this.destination.r - this.r) * pos)\r\n    , g: ~~(this.g + (this.destination.g - this.g) * pos)\r\n    , b: ~~(this.b + (this.destination.b - this.b) * pos)\r\n    })\r\n  }\r\n\r\n})\r\n\r\n// Testers\r\n\r\n// Test if given value is a color string\r\nSVG.Color.test = function(color) {\r\n  color += ''\r\n  return SVG.regex.isHex.test(color)\r\n      || SVG.regex.isRgb.test(color)\r\n}\r\n\r\n// Test if given value is a rgb object\r\nSVG.Color.isRgb = function(color) {\r\n  return color && typeof color.r == 'number'\r\n               && typeof color.g == 'number'\r\n               && typeof color.b == 'number'\r\n}\r\n\r\n// Test if given value is a color\r\nSVG.Color.isColor = function(color) {\r\n  return SVG.Color.isRgb(color) || SVG.Color.test(color)\r\n}\n// Module for array conversion\r\nSVG.Array = function(array, fallback) {\r\n  array = (array || []).valueOf()\r\n\r\n  // if array is empty and fallback is provided, use fallback\r\n  if (array.length == 0 && fallback)\r\n    array = fallback.valueOf()\r\n\r\n  // parse array\r\n  this.value = this.parse(array)\r\n}\r\n\r\nSVG.extend(SVG.Array, {\r\n  // Make array morphable\r\n  morph: function(array) {\r\n    this.destination = this.parse(array)\r\n\r\n    // normalize length of arrays\r\n    if (this.value.length != this.destination.length) {\r\n      var lastValue       = this.value[this.value.length - 1]\r\n        , lastDestination = this.destination[this.destination.length - 1]\r\n\r\n      while(this.value.length > this.destination.length)\r\n        this.destination.push(lastDestination)\r\n      while(this.value.length < this.destination.length)\r\n        this.value.push(lastValue)\r\n    }\r\n\r\n    return this\r\n  }\r\n  // Clean up any duplicate points\r\n, settle: function() {\r\n    // find all unique values\r\n    for (var i = 0, il = this.value.length, seen = []; i < il; i++)\r\n      if (seen.indexOf(this.value[i]) == -1)\r\n        seen.push(this.value[i])\r\n\r\n    // set new value\r\n    return this.value = seen\r\n  }\r\n  // Get morphed array at given position\r\n, at: function(pos) {\r\n    // make sure a destination is defined\r\n    if (!this.destination) return this\r\n\r\n    // generate morphed array\r\n    for (var i = 0, il = this.value.length, array = []; i < il; i++)\r\n      array.push(this.value[i] + (this.destination[i] - this.value[i]) * pos)\r\n\r\n    return new SVG.Array(array)\r\n  }\r\n  // Convert array to string\r\n, toString: function() {\r\n    return this.value.join(' ')\r\n  }\r\n  // Real value\r\n, valueOf: function() {\r\n    return this.value\r\n  }\r\n  // Parse whitespace separated string\r\n, parse: function(array) {\r\n    array = array.valueOf()\r\n\r\n    // if already is an array, no need to parse it\r\n    if (Array.isArray(array)) return array\r\n\r\n    return this.split(array)\r\n  }\r\n  // Strip unnecessary whitespace\r\n, split: function(string) {\r\n    return string.trim().split(SVG.regex.delimiter).map(parseFloat)\r\n  }\r\n  // Reverse array\r\n, reverse: function() {\r\n    this.value.reverse()\r\n\r\n    return this\r\n  }\r\n, clone: function() {\r\n    var clone = new this.constructor()\r\n    clone.value = array_clone(this.value)\r\n    return clone\r\n  }\r\n})\n// Poly points array\r\nSVG.PointArray = function(array, fallback) {\r\n  SVG.Array.call(this, array, fallback || [[0,0]])\r\n}\r\n\r\n// Inherit from SVG.Array\r\nSVG.PointArray.prototype = new SVG.Array\r\nSVG.PointArray.prototype.constructor = SVG.PointArray\r\n\r\nSVG.extend(SVG.PointArray, {\r\n  // Convert array to string\r\n  toString: function() {\r\n    // convert to a poly point string\r\n    for (var i = 0, il = this.value.length, array = []; i < il; i++)\r\n      array.push(this.value[i].join(','))\r\n\r\n    return array.join(' ')\r\n  }\r\n  // Convert array to line object\r\n, toLine: function() {\r\n    return {\r\n      x1: this.value[0][0]\r\n    , y1: this.value[0][1]\r\n    , x2: this.value[1][0]\r\n    , y2: this.value[1][1]\r\n    }\r\n  }\r\n  // Get morphed array at given position\r\n, at: function(pos) {\r\n    // make sure a destination is defined\r\n    if (!this.destination) return this\r\n\r\n    // generate morphed point string\r\n    for (var i = 0, il = this.value.length, array = []; i < il; i++)\r\n      array.push([\r\n        this.value[i][0] + (this.destination[i][0] - this.value[i][0]) * pos\r\n      , this.value[i][1] + (this.destination[i][1] - this.value[i][1]) * pos\r\n      ])\r\n\r\n    return new SVG.PointArray(array)\r\n  }\r\n  // Parse point string and flat array\r\n, parse: function(array) {\r\n    var points = []\r\n\r\n    array = array.valueOf()\r\n\r\n    // if it is an array\r\n    if (Array.isArray(array)) {\r\n      // and it is not flat, there is no need to parse it\r\n      if(Array.isArray(array[0])) {\r\n        return array\r\n      }\r\n    } else { // Else, it is considered as a string\r\n      // parse points\r\n      array = array.trim().split(SVG.regex.delimiter).map(parseFloat)\r\n    }\r\n\r\n    // validate points - https://svgwg.org/svg2-draft/shapes.html#DataTypePoints\r\n    // Odd number of coordinates is an error. In such cases, drop the last odd coordinate.\r\n    if (array.length % 2 !== 0) array.pop()\r\n\r\n    // wrap points in two-tuples and parse points as floats\r\n    for(var i = 0, len = array.length; i < len; i = i + 2)\r\n      points.push([ array[i], array[i+1] ])\r\n\r\n    return points\r\n  }\r\n  // Move point string\r\n, move: function(x, y) {\r\n    var box = this.bbox()\r\n\r\n    // get relative offset\r\n    x -= box.x\r\n    y -= box.y\r\n\r\n    // move every point\r\n    if (!isNaN(x) && !isNaN(y))\r\n      for (var i = this.value.length - 1; i >= 0; i--)\r\n        this.value[i] = [this.value[i][0] + x, this.value[i][1] + y]\r\n\r\n    return this\r\n  }\r\n  // Resize poly string\r\n, size: function(width, height) {\r\n    var i, box = this.bbox()\r\n\r\n    // recalculate position of all points according to new size\r\n    for (i = this.value.length - 1; i >= 0; i--) {\r\n      if(box.width) this.value[i][0] = ((this.value[i][0] - box.x) * width)  / box.width  + box.x\r\n      if(box.height) this.value[i][1] = ((this.value[i][1] - box.y) * height) / box.height + box.y\r\n    }\r\n\r\n    return this\r\n  }\r\n  // Get bounding box of points\r\n, bbox: function() {\r\n    SVG.parser.poly.setAttribute('points', this.toString())\r\n\r\n    return SVG.parser.poly.getBBox()\r\n  }\r\n})\r\n\nvar pathHandlers = {\r\n  M: function(c, p, p0) {\r\n    p.x = p0.x = c[0]\r\n    p.y = p0.y = c[1]\r\n\r\n    return ['M', p.x, p.y]\r\n  },\r\n  L: function(c, p) {\r\n    p.x = c[0]\r\n    p.y = c[1]\r\n    return ['L', c[0], c[1]]\r\n  },\r\n  H: function(c, p) {\r\n    p.x = c[0]\r\n    return ['H', c[0]]\r\n  },\r\n  V: function(c, p) {\r\n    p.y = c[0]\r\n    return ['V', c[0]]\r\n  },\r\n  C: function(c, p) {\r\n    p.x = c[4]\r\n    p.y = c[5]\r\n    return ['C', c[0], c[1], c[2], c[3], c[4], c[5]]\r\n  },\r\n  S: function(c, p) {\r\n    p.x = c[2]\r\n    p.y = c[3]\r\n    return ['S', c[0], c[1], c[2], c[3]]\r\n  },\r\n  Q: function(c, p) {\r\n    p.x = c[2]\r\n    p.y = c[3]\r\n    return ['Q', c[0], c[1], c[2], c[3]]\r\n  },\r\n  T: function(c, p) {\r\n    p.x = c[0]\r\n    p.y = c[1]\r\n    return ['T', c[0], c[1]]\r\n  },\r\n  Z: function(c, p, p0) {\r\n    p.x = p0.x\r\n    p.y = p0.y\r\n    return ['Z']\r\n  },\r\n  A: function(c, p) {\r\n    p.x = c[5]\r\n    p.y = c[6]\r\n    return ['A', c[0], c[1], c[2], c[3], c[4], c[5], c[6]]\r\n  }\r\n}\r\n\r\nvar mlhvqtcsa = 'mlhvqtcsaz'.split('')\r\n\r\nfor(var i = 0, il = mlhvqtcsa.length; i < il; ++i){\r\n  pathHandlers[mlhvqtcsa[i]] = (function(i){\r\n    return function(c, p, p0) {\r\n      if(i == 'H') c[0] = c[0] + p.x\r\n      else if(i == 'V') c[0] = c[0] + p.y\r\n      else if(i == 'A'){\r\n        c[5] = c[5] + p.x,\r\n        c[6] = c[6] + p.y\r\n      }\r\n      else\r\n        for(var j = 0, jl = c.length; j < jl; ++j) {\r\n          c[j] = c[j] + (j%2 ? p.y : p.x)\r\n        }\r\n\r\n      return pathHandlers[i](c, p, p0)\r\n    }\r\n  })(mlhvqtcsa[i].toUpperCase())\r\n}\r\n\r\n// Path points array\r\nSVG.PathArray = function(array, fallback) {\r\n  SVG.Array.call(this, array, fallback || [['M', 0, 0]])\r\n}\r\n\r\n// Inherit from SVG.Array\r\nSVG.PathArray.prototype = new SVG.Array\r\nSVG.PathArray.prototype.constructor = SVG.PathArray\r\n\r\nSVG.extend(SVG.PathArray, {\r\n  // Convert array to string\r\n  toString: function() {\r\n    return arrayToString(this.value)\r\n  }\r\n  // Move path string\r\n, move: function(x, y) {\r\n    // get bounding box of current situation\r\n    var box = this.bbox()\r\n\r\n    // get relative offset\r\n    x -= box.x\r\n    y -= box.y\r\n\r\n    if (!isNaN(x) && !isNaN(y)) {\r\n      // move every point\r\n      for (var l, i = this.value.length - 1; i >= 0; i--) {\r\n        l = this.value[i][0]\r\n\r\n        if (l == 'M' || l == 'L' || l == 'T')  {\r\n          this.value[i][1] += x\r\n          this.value[i][2] += y\r\n\r\n        } else if (l == 'H')  {\r\n          this.value[i][1] += x\r\n\r\n        } else if (l == 'V')  {\r\n          this.value[i][1] += y\r\n\r\n        } else if (l == 'C' || l == 'S' || l == 'Q')  {\r\n          this.value[i][1] += x\r\n          this.value[i][2] += y\r\n          this.value[i][3] += x\r\n          this.value[i][4] += y\r\n\r\n          if (l == 'C')  {\r\n            this.value[i][5] += x\r\n            this.value[i][6] += y\r\n          }\r\n\r\n        } else if (l == 'A')  {\r\n          this.value[i][6] += x\r\n          this.value[i][7] += y\r\n        }\r\n\r\n      }\r\n    }\r\n\r\n    return this\r\n  }\r\n  // Resize path string\r\n, size: function(width, height) {\r\n    // get bounding box of current situation\r\n    var i, l, box = this.bbox()\r\n\r\n    // recalculate position of all points according to new size\r\n    for (i = this.value.length - 1; i >= 0; i--) {\r\n      l = this.value[i][0]\r\n\r\n      if (l == 'M' || l == 'L' || l == 'T')  {\r\n        this.value[i][1] = ((this.value[i][1] - box.x) * width)  / box.width  + box.x\r\n        this.value[i][2] = ((this.value[i][2] - box.y) * height) / box.height + box.y\r\n\r\n      } else if (l == 'H')  {\r\n        this.value[i][1] = ((this.value[i][1] - box.x) * width)  / box.width  + box.x\r\n\r\n      } else if (l == 'V')  {\r\n        this.value[i][1] = ((this.value[i][1] - box.y) * height) / box.height + box.y\r\n\r\n      } else if (l == 'C' || l == 'S' || l == 'Q')  {\r\n        this.value[i][1] = ((this.value[i][1] - box.x) * width)  / box.width  + box.x\r\n        this.value[i][2] = ((this.value[i][2] - box.y) * height) / box.height + box.y\r\n        this.value[i][3] = ((this.value[i][3] - box.x) * width)  / box.width  + box.x\r\n        this.value[i][4] = ((this.value[i][4] - box.y) * height) / box.height + box.y\r\n\r\n        if (l == 'C')  {\r\n          this.value[i][5] = ((this.value[i][5] - box.x) * width)  / box.width  + box.x\r\n          this.value[i][6] = ((this.value[i][6] - box.y) * height) / box.height + box.y\r\n        }\r\n\r\n      } else if (l == 'A')  {\r\n        // resize radii\r\n        this.value[i][1] = (this.value[i][1] * width)  / box.width\r\n        this.value[i][2] = (this.value[i][2] * height) / box.height\r\n\r\n        // move position values\r\n        this.value[i][6] = ((this.value[i][6] - box.x) * width)  / box.width  + box.x\r\n        this.value[i][7] = ((this.value[i][7] - box.y) * height) / box.height + box.y\r\n      }\r\n\r\n    }\r\n\r\n    return this\r\n  }\r\n  // Test if the passed path array use the same path data commands as this path array\r\n, equalCommands: function(pathArray) {\r\n    var i, il, equalCommands\r\n\r\n    pathArray = new SVG.PathArray(pathArray)\r\n\r\n    equalCommands = this.value.length === pathArray.value.length\r\n    for(i = 0, il = this.value.length; equalCommands && i < il; i++) {\r\n      equalCommands = this.value[i][0] === pathArray.value[i][0]\r\n    }\r\n\r\n    return equalCommands\r\n  }\r\n  // Make path array morphable\r\n, morph: function(pathArray) {\r\n    pathArray = new SVG.PathArray(pathArray)\r\n\r\n    if(this.equalCommands(pathArray)) {\r\n      this.destination = pathArray\r\n    } else {\r\n      this.destination = null\r\n    }\r\n\r\n    return this\r\n  }\r\n  // Get morphed path array at given position\r\n, at: function(pos) {\r\n    // make sure a destination is defined\r\n    if (!this.destination) return this\r\n\r\n    var sourceArray = this.value\r\n      , destinationArray = this.destination.value\r\n      , array = [], pathArray = new SVG.PathArray()\r\n      , i, il, j, jl\r\n\r\n    // Animate has specified in the SVG spec\r\n    // See: https://www.w3.org/TR/SVG11/paths.html#PathElement\r\n    for (i = 0, il = sourceArray.length; i < il; i++) {\r\n      array[i] = [sourceArray[i][0]]\r\n      for(j = 1, jl = sourceArray[i].length; j < jl; j++) {\r\n        array[i][j] = sourceArray[i][j] + (destinationArray[i][j] - sourceArray[i][j]) * pos\r\n      }\r\n      // For the two flags of the elliptical arc command, the SVG spec say:\r\n      // Flags and booleans are interpolated as fractions between zero and one, with any non-zero value considered to be a value of one/true\r\n      // Elliptical arc command as an array followed by corresponding indexes:\r\n      // ['A', rx, ry, x-axis-rotation, large-arc-flag, sweep-flag, x, y]\r\n      //   0    1   2        3                 4             5      6  7\r\n      if(array[i][0] === 'A') {\r\n        array[i][4] = +(array[i][4] != 0)\r\n        array[i][5] = +(array[i][5] != 0)\r\n      }\r\n    }\r\n\r\n    // Directly modify the value of a path array, this is done this way for performance\r\n    pathArray.value = array\r\n    return pathArray\r\n  }\r\n  // Absolutize and parse path to array\r\n, parse: function(array) {\r\n    // if it's already a patharray, no need to parse it\r\n    if (array instanceof SVG.PathArray) return array.valueOf()\r\n\r\n    // prepare for parsing\r\n    var i, x0, y0, s, seg, arr\r\n      , x = 0\r\n      , y = 0\r\n      , paramCnt = { 'M':2, 'L':2, 'H':1, 'V':1, 'C':6, 'S':4, 'Q':4, 'T':2, 'A':7, 'Z':0 }\r\n\r\n    if(typeof array == 'string'){\r\n\r\n      array = array\r\n        .replace(SVG.regex.numbersWithDots, pathRegReplace) // convert 45.123.123 to 45.123 .123\r\n        .replace(SVG.regex.pathLetters, ' $& ') // put some room between letters and numbers\r\n        .replace(SVG.regex.hyphen, '$1 -')      // add space before hyphen\r\n        .trim()                                 // trim\r\n        .split(SVG.regex.delimiter)   // split into array\r\n\r\n    }else{\r\n      array = array.reduce(function(prev, curr){\r\n        return [].concat.call(prev, curr)\r\n      }, [])\r\n    }\r\n\r\n    // array now is an array containing all parts of a path e.g. ['M', '0', '0', 'L', '30', '30' ...]\r\n    var arr = []\r\n      , p = new SVG.Point()\r\n      , p0 = new SVG.Point()\r\n      , index = 0\r\n      , len = array.length\r\n\r\n    do{\r\n      // Test if we have a path letter\r\n      if(SVG.regex.isPathLetter.test(array[index])){\r\n        s = array[index]\r\n        ++index\r\n      // If last letter was a move command and we got no new, it defaults to [L]ine\r\n      }else if(s == 'M'){\r\n        s = 'L'\r\n      }else if(s == 'm'){\r\n        s = 'l'\r\n      }\r\n\r\n      arr.push(pathHandlers[s].call(null,\r\n          array.slice(index, (index = index + paramCnt[s.toUpperCase()])).map(parseFloat),\r\n          p, p0\r\n        )\r\n      )\r\n\r\n    }while(len > index)\r\n\r\n    return arr\r\n\r\n  }\r\n  // Get bounding box of path\r\n, bbox: function() {\r\n    SVG.parser.path.setAttribute('d', this.toString())\r\n\r\n    return SVG.parser.path.getBBox()\r\n  }\r\n\r\n})\r\n\n// Module for unit convertions\r\nSVG.Number = SVG.invent({\r\n  // Initialize\r\n  create: function(value, unit) {\r\n    // initialize defaults\r\n    this.value = 0\r\n    this.unit  = unit || ''\r\n\r\n    // parse value\r\n    if (typeof value === 'number') {\r\n      // ensure a valid numeric value\r\n      this.value = isNaN(value) ? 0 : !isFinite(value) ? (value < 0 ? -3.4e+38 : +3.4e+38) : value\r\n\r\n    } else if (typeof value === 'string') {\r\n      unit = value.match(SVG.regex.numberAndUnit)\r\n\r\n      if (unit) {\r\n        // make value numeric\r\n        this.value = parseFloat(unit[1])\r\n\r\n        // normalize\r\n        if (unit[5] == '%')\r\n          this.value /= 100\r\n        else if (unit[5] == 's')\r\n          this.value *= 1000\r\n\r\n        // store unit\r\n        this.unit = unit[5]\r\n      }\r\n\r\n    } else {\r\n      if (value instanceof SVG.Number) {\r\n        this.value = value.valueOf()\r\n        this.unit  = value.unit\r\n      }\r\n    }\r\n\r\n  }\r\n  // Add methods\r\n, extend: {\r\n    // Stringalize\r\n    toString: function() {\r\n      return (\r\n        this.unit == '%' ?\r\n          ~~(this.value * 1e8) / 1e6:\r\n        this.unit == 's' ?\r\n          this.value / 1e3 :\r\n          this.value\r\n      ) + this.unit\r\n    }\r\n  , toJSON: function() {\r\n      return this.toString()\r\n    }\r\n  , // Convert to primitive\r\n    valueOf: function() {\r\n      return this.value\r\n    }\r\n    // Add number\r\n  , plus: function(number) {\r\n      number = new SVG.Number(number)\r\n      return new SVG.Number(this + number, this.unit || number.unit)\r\n    }\r\n    // Subtract number\r\n  , minus: function(number) {\r\n      number = new SVG.Number(number)\r\n      return new SVG.Number(this - number, this.unit || number.unit)\r\n    }\r\n    // Multiply number\r\n  , times: function(number) {\r\n      number = new SVG.Number(number)\r\n      return new SVG.Number(this * number, this.unit || number.unit)\r\n    }\r\n    // Divide number\r\n  , divide: function(number) {\r\n      number = new SVG.Number(number)\r\n      return new SVG.Number(this / number, this.unit || number.unit)\r\n    }\r\n    // Convert to different unit\r\n  , to: function(unit) {\r\n      var number = new SVG.Number(this)\r\n\r\n      if (typeof unit === 'string')\r\n        number.unit = unit\r\n\r\n      return number\r\n    }\r\n    // Make number morphable\r\n  , morph: function(number) {\r\n      this.destination = new SVG.Number(number)\r\n\r\n      if(number.relative) {\r\n        this.destination.value += this.value\r\n      }\r\n\r\n      return this\r\n    }\r\n    // Get morphed number at given position\r\n  , at: function(pos) {\r\n      // Make sure a destination is defined\r\n      if (!this.destination) return this\r\n\r\n      // Generate new morphed number\r\n      return new SVG.Number(this.destination)\r\n          .minus(this)\r\n          .times(pos)\r\n          .plus(this)\r\n    }\r\n\r\n  }\r\n})\r\n\n\r\nSVG.Element = SVG.invent({\r\n  // Initialize node\r\n  create: function(node) {\r\n    // make stroke value accessible dynamically\r\n    this._stroke = SVG.defaults.attrs.stroke\r\n    this._event = null\r\n\r\n    // initialize data object\r\n    this.dom = {}\r\n\r\n    // create circular reference\r\n    if (this.node = node) {\r\n      this.type = node.nodeName\r\n      this.node.instance = this\r\n\r\n      // store current attribute value\r\n      this._stroke = node.getAttribute('stroke') || this._stroke\r\n    }\r\n  }\r\n\r\n  // Add class methods\r\n, extend: {\r\n    // Move over x-axis\r\n    x: function(x) {\r\n      return this.attr('x', x)\r\n    }\r\n    // Move over y-axis\r\n  , y: function(y) {\r\n      return this.attr('y', y)\r\n    }\r\n    // Move by center over x-axis\r\n  , cx: function(x) {\r\n      return x == null ? this.x() + this.width() / 2 : this.x(x - this.width() / 2)\r\n    }\r\n    // Move by center over y-axis\r\n  , cy: function(y) {\r\n      return y == null ? this.y() + this.height() / 2 : this.y(y - this.height() / 2)\r\n    }\r\n    // Move element to given x and y values\r\n  , move: function(x, y) {\r\n      return this.x(x).y(y)\r\n    }\r\n    // Move element by its center\r\n  , center: function(x, y) {\r\n      return this.cx(x).cy(y)\r\n    }\r\n    // Set width of element\r\n  , width: function(width) {\r\n      return this.attr('width', width)\r\n    }\r\n    // Set height of element\r\n  , height: function(height) {\r\n      return this.attr('height', height)\r\n    }\r\n    // Set element size to given width and height\r\n  , size: function(width, height) {\r\n      var p = proportionalSize(this, width, height)\r\n\r\n      return this\r\n        .width(new SVG.Number(p.width))\r\n        .height(new SVG.Number(p.height))\r\n    }\r\n    // Clone element\r\n  , clone: function(parent, withData) {\r\n      // write dom data to the dom so the clone can pickup the data\r\n      this.writeDataToDom()\r\n\r\n      // clone element and assign new id\r\n      var clone = assignNewId(this.node.cloneNode(true))\r\n\r\n      // insert the clone in the given parent or after myself\r\n      if(parent) parent.add(clone)\r\n      else this.after(clone)\r\n\r\n      return clone\r\n    }\r\n    // Remove element\r\n  , remove: function() {\r\n      if (this.parent())\r\n        this.parent().removeElement(this)\r\n\r\n      return this\r\n    }\r\n    // Replace element\r\n  , replace: function(element) {\r\n      this.after(element).remove()\r\n\r\n      return element\r\n    }\r\n    // Add element to given container and return self\r\n  , addTo: function(parent) {\r\n      return parent.put(this)\r\n    }\r\n    // Add element to given container and return container\r\n  , putIn: function(parent) {\r\n      return parent.add(this)\r\n    }\r\n    // Get / set id\r\n  , id: function(id) {\r\n      return this.attr('id', id)\r\n    }\r\n    // Checks whether the given point inside the bounding box of the element\r\n  , inside: function(x, y) {\r\n      var box = this.bbox()\r\n\r\n      return x > box.x\r\n          && y > box.y\r\n          && x < box.x + box.width\r\n          && y < box.y + box.height\r\n    }\r\n    // Show element\r\n  , show: function() {\r\n      return this.style('display', '')\r\n    }\r\n    // Hide element\r\n  , hide: function() {\r\n      return this.style('display', 'none')\r\n    }\r\n    // Is element visible?\r\n  , visible: function() {\r\n      return this.style('display') != 'none'\r\n    }\r\n    // Return id on string conversion\r\n  , toString: function() {\r\n      return this.attr('id')\r\n    }\r\n    // Return array of classes on the node\r\n  , classes: function() {\r\n      var attr = this.attr('class')\r\n\r\n      return attr == null ? [] : attr.trim().split(SVG.regex.delimiter)\r\n    }\r\n    // Return true if class exists on the node, false otherwise\r\n  , hasClass: function(name) {\r\n      return this.classes().indexOf(name) != -1\r\n    }\r\n    // Add class to the node\r\n  , addClass: function(name) {\r\n      if (!this.hasClass(name)) {\r\n        var array = this.classes()\r\n        array.push(name)\r\n        this.attr('class', array.join(' '))\r\n      }\r\n\r\n      return this\r\n    }\r\n    // Remove class from the node\r\n  , removeClass: function(name) {\r\n      if (this.hasClass(name)) {\r\n        this.attr('class', this.classes().filter(function(c) {\r\n          return c != name\r\n        }).join(' '))\r\n      }\r\n\r\n      return this\r\n    }\r\n    // Toggle the presence of a class on the node\r\n  , toggleClass: function(name) {\r\n      return this.hasClass(name) ? this.removeClass(name) : this.addClass(name)\r\n    }\r\n    // Get referenced element form attribute value\r\n  , reference: function(attr) {\r\n      return SVG.get(this.attr(attr))\r\n    }\r\n    // Returns the parent element instance\r\n  , parent: function(type) {\r\n      var parent = this\r\n\r\n      // check for parent\r\n      if(!parent.node.parentNode) return null\r\n\r\n      // get parent element\r\n      parent = SVG.adopt(parent.node.parentNode)\r\n\r\n      if(!type) return parent\r\n\r\n      // loop trough ancestors if type is given\r\n      while(parent && parent.node instanceof window.SVGElement){\r\n        if(typeof type === 'string' ? parent.matches(type) : parent instanceof type) return parent\r\n        parent = SVG.adopt(parent.node.parentNode)\r\n      }\r\n    }\r\n    // Get parent document\r\n  , doc: function() {\r\n      return this instanceof SVG.Doc ? this : this.parent(SVG.Doc)\r\n    }\r\n    // return array of all ancestors of given type up to the root svg\r\n  , parents: function(type) {\r\n      var parents = [], parent = this\r\n\r\n      do{\r\n        parent = parent.parent(type)\r\n        if(!parent || !parent.node) break\r\n\r\n        parents.push(parent)\r\n      } while(parent.parent)\r\n\r\n      return parents\r\n    }\r\n    // matches the element vs a css selector\r\n  , matches: function(selector){\r\n      return matches(this.node, selector)\r\n    }\r\n    // Returns the svg node to call native svg methods on it\r\n  , native: function() {\r\n      return this.node\r\n    }\r\n    // Import raw svg\r\n  , svg: function(svg) {\r\n      // create temporary holder\r\n      var well = document.createElement('svg')\r\n\r\n      // act as a setter if svg is given\r\n      if (svg && this instanceof SVG.Parent) {\r\n        // dump raw svg\r\n        well.innerHTML = '<svg>' + svg.replace(/\\n/, '').replace(/<(\\w+)([^<]+?)\\/>/g, '<$1$2></$1>') + '</svg>'\r\n\r\n        // transplant nodes\r\n        for (var i = 0, il = well.firstChild.childNodes.length; i < il; i++)\r\n          this.node.appendChild(well.firstChild.firstChild)\r\n\r\n      // otherwise act as a getter\r\n      } else {\r\n        // create a wrapping svg element in case of partial content\r\n        well.appendChild(svg = document.createElement('svg'))\r\n\r\n        // write svgjs data to the dom\r\n        this.writeDataToDom()\r\n\r\n        // insert a copy of this node\r\n        svg.appendChild(this.node.cloneNode(true))\r\n\r\n        // return target element\r\n        return well.innerHTML.replace(/^<svg>/, '').replace(/<\\/svg>$/, '')\r\n      }\r\n\r\n      return this\r\n    }\r\n  // write svgjs data to the dom\r\n  , writeDataToDom: function() {\r\n\r\n      // dump variables recursively\r\n      if(this.each || this.lines){\r\n        var fn = this.each ? this : this.lines();\r\n        fn.each(function(){\r\n          this.writeDataToDom()\r\n        })\r\n      }\r\n\r\n      // remove previously set data\r\n      this.node.removeAttribute('svgjs:data')\r\n\r\n      if(Object.keys(this.dom).length)\r\n        this.node.setAttribute('svgjs:data', JSON.stringify(this.dom)) // see #428\r\n\r\n      return this\r\n    }\r\n  // set given data to the elements data property\r\n  , setData: function(o){\r\n      this.dom = o\r\n      return this\r\n    }\r\n  , is: function(obj){\r\n      return is(this, obj)\r\n    }\r\n  }\r\n})\r\n\nSVG.easing = {\r\n  '-': function(pos){return pos}\r\n, '<>':function(pos){return -Math.cos(pos * Math.PI) / 2 + 0.5}\r\n, '>': function(pos){return  Math.sin(pos * Math.PI / 2)}\r\n, '<': function(pos){return -Math.cos(pos * Math.PI / 2) + 1}\r\n}\r\n\r\nSVG.morph = function(pos){\r\n  return function(from, to) {\r\n    return new SVG.MorphObj(from, to).at(pos)\r\n  }\r\n}\r\n\r\nSVG.Situation = SVG.invent({\r\n\r\n  create: function(o){\r\n    this.init = false\r\n    this.reversed = false\r\n    this.reversing = false\r\n\r\n    this.duration = new SVG.Number(o.duration).valueOf()\r\n    this.delay = new SVG.Number(o.delay).valueOf()\r\n\r\n    this.start = +new Date() + this.delay\r\n    this.finish = this.start + this.duration\r\n    this.ease = o.ease\r\n\r\n    // this.loop is incremented from 0 to this.loops\r\n    // it is also incremented when in an infinite loop (when this.loops is true)\r\n    this.loop = 0\r\n    this.loops = false\r\n\r\n    this.animations = {\r\n      // functionToCall: [list of morphable objects]\r\n      // e.g. move: [SVG.Number, SVG.Number]\r\n    }\r\n\r\n    this.attrs = {\r\n      // holds all attributes which are not represented from a function svg.js provides\r\n      // e.g. someAttr: SVG.Number\r\n    }\r\n\r\n    this.styles = {\r\n      // holds all styles which should be animated\r\n      // e.g. fill-color: SVG.Color\r\n    }\r\n\r\n    this.transforms = [\r\n      // holds all transformations as transformation objects\r\n      // e.g. [SVG.Rotate, SVG.Translate, SVG.Matrix]\r\n    ]\r\n\r\n    this.once = {\r\n      // functions to fire at a specific position\r\n      // e.g. \"0.5\": function foo(){}\r\n    }\r\n\r\n  }\r\n\r\n})\r\n\r\n\r\nSVG.FX = SVG.invent({\r\n\r\n  create: function(element) {\r\n    this._target = element\r\n    this.situations = []\r\n    this.active = false\r\n    this.situation = null\r\n    this.paused = false\r\n    this.lastPos = 0\r\n    this.pos = 0\r\n    // The absolute position of an animation is its position in the context of its complete duration (including delay and loops)\r\n    // When performing a delay, absPos is below 0 and when performing a loop, its value is above 1\r\n    this.absPos = 0\r\n    this._speed = 1\r\n  }\r\n\r\n, extend: {\r\n\r\n    /**\r\n     * sets or returns the target of this animation\r\n     * @param o object || number In case of Object it holds all parameters. In case of number its the duration of the animation\r\n     * @param ease function || string Function which should be used for easing or easing keyword\r\n     * @param delay Number indicating the delay before the animation starts\r\n     * @return target || this\r\n     */\r\n    animate: function(o, ease, delay){\r\n\r\n      if(typeof o == 'object'){\r\n        ease = o.ease\r\n        delay = o.delay\r\n        o = o.duration\r\n      }\r\n\r\n      var situation = new SVG.Situation({\r\n        duration: o || 1000,\r\n        delay: delay || 0,\r\n        ease: SVG.easing[ease || '-'] || ease\r\n      })\r\n\r\n      this.queue(situation)\r\n\r\n      return this\r\n    }\r\n\r\n    /**\r\n     * sets a delay before the next element of the queue is called\r\n     * @param delay Duration of delay in milliseconds\r\n     * @return this.target()\r\n     */\r\n  , delay: function(delay){\r\n      // The delay is performed by an empty situation with its duration\r\n      // attribute set to the duration of the delay\r\n      var situation = new SVG.Situation({\r\n        duration: delay,\r\n        delay: 0,\r\n        ease: SVG.easing['-']\r\n      })\r\n\r\n      return this.queue(situation)\r\n    }\r\n\r\n    /**\r\n     * sets or returns the target of this animation\r\n     * @param null || target SVG.Element which should be set as new target\r\n     * @return target || this\r\n     */\r\n  , target: function(target){\r\n      if(target && target instanceof SVG.Element){\r\n        this._target = target\r\n        return this\r\n      }\r\n\r\n      return this._target\r\n    }\r\n\r\n    // returns the absolute position at a given time\r\n  , timeToAbsPos: function(timestamp){\r\n      return (timestamp - this.situation.start) / (this.situation.duration/this._speed)\r\n    }\r\n\r\n    // returns the timestamp from a given absolute positon\r\n  , absPosToTime: function(absPos){\r\n      return this.situation.duration/this._speed * absPos + this.situation.start\r\n    }\r\n\r\n    // starts the animationloop\r\n  , startAnimFrame: function(){\r\n      this.stopAnimFrame()\r\n      this.animationFrame = window.requestAnimationFrame(function(){ this.step() }.bind(this))\r\n    }\r\n\r\n    // cancels the animationframe\r\n  , stopAnimFrame: function(){\r\n      window.cancelAnimationFrame(this.animationFrame)\r\n    }\r\n\r\n    // kicks off the animation - only does something when the queue is currently not active and at least one situation is set\r\n  , start: function(){\r\n      // dont start if already started\r\n      if(!this.active && this.situation){\r\n        this.active = true\r\n        this.startCurrent()\r\n      }\r\n\r\n      return this\r\n    }\r\n\r\n    // start the current situation\r\n  , startCurrent: function(){\r\n      this.situation.start = +new Date + this.situation.delay/this._speed\r\n      this.situation.finish = this.situation.start + this.situation.duration/this._speed\r\n      return this.initAnimations().step()\r\n    }\r\n\r\n    /**\r\n     * adds a function / Situation to the animation queue\r\n     * @param fn function / situation to add\r\n     * @return this\r\n     */\r\n  , queue: function(fn){\r\n      if(typeof fn == 'function' || fn instanceof SVG.Situation)\r\n        this.situations.push(fn)\r\n\r\n      if(!this.situation) this.situation = this.situations.shift()\r\n\r\n      return this\r\n    }\r\n\r\n    /**\r\n     * pulls next element from the queue and execute it\r\n     * @return this\r\n     */\r\n  , dequeue: function(){\r\n      // stop current animation\r\n      this.stop()\r\n\r\n      // get next animation from queue\r\n      this.situation = this.situations.shift()\r\n\r\n      if(this.situation){\r\n        if(this.situation instanceof SVG.Situation) {\r\n          this.start()\r\n        } else {\r\n          // If it is not a SVG.Situation, then it is a function, we execute it\r\n          this.situation.call(this)\r\n        }\r\n      }\r\n\r\n      return this\r\n    }\r\n\r\n    // updates all animations to the current state of the element\r\n    // this is important when one property could be changed from another property\r\n  , initAnimations: function() {\r\n      var i, j, source\r\n      var s = this.situation\r\n\r\n      if(s.init) return this\r\n\r\n      for(i in s.animations){\r\n        source = this.target()[i]()\r\n\r\n        if(!Array.isArray(source)) {\r\n          source = [source]\r\n        }\r\n\r\n        if(!Array.isArray(s.animations[i])) {\r\n          s.animations[i] = [s.animations[i]]\r\n        }\r\n\r\n        //if(s.animations[i].length > source.length) {\r\n        //  source.concat = source.concat(s.animations[i].slice(source.length, s.animations[i].length))\r\n        //}\r\n\r\n        for(j = source.length; j--;) {\r\n          // The condition is because some methods return a normal number instead\r\n          // of a SVG.Number\r\n          if(s.animations[i][j] instanceof SVG.Number)\r\n            source[j] = new SVG.Number(source[j])\r\n\r\n          s.animations[i][j] = source[j].morph(s.animations[i][j])\r\n        }\r\n      }\r\n\r\n      for(i in s.attrs){\r\n        s.attrs[i] = new SVG.MorphObj(this.target().attr(i), s.attrs[i])\r\n      }\r\n\r\n      for(i in s.styles){\r\n        s.styles[i] = new SVG.MorphObj(this.target().style(i), s.styles[i])\r\n      }\r\n\r\n      s.initialTransformation = this.target().matrixify()\r\n\r\n      s.init = true\r\n      return this\r\n    }\r\n  , clearQueue: function(){\r\n      this.situations = []\r\n      return this\r\n    }\r\n  , clearCurrent: function(){\r\n      this.situation = null\r\n      return this\r\n    }\r\n    /** stops the animation immediately\r\n     * @param jumpToEnd A Boolean indicating whether to complete the current animation immediately.\r\n     * @param clearQueue A Boolean indicating whether to remove queued animation as well.\r\n     * @return this\r\n     */\r\n  , stop: function(jumpToEnd, clearQueue){\r\n      var active = this.active\r\n      this.active = false\r\n\r\n      if(clearQueue){\r\n        this.clearQueue()\r\n      }\r\n\r\n      if(jumpToEnd && this.situation){\r\n        // initialize the situation if it was not\r\n        !active && this.startCurrent()\r\n        this.atEnd()\r\n      }\r\n\r\n      this.stopAnimFrame()\r\n\r\n      return this.clearCurrent()\r\n    }\r\n\r\n    /** resets the element to the state where the current element has started\r\n     * @return this\r\n     */\r\n  , reset: function(){\r\n      if(this.situation){\r\n        var temp = this.situation\r\n        this.stop()\r\n        this.situation = temp\r\n        this.atStart()\r\n      }\r\n      return this\r\n    }\r\n\r\n    // Stop the currently-running animation, remove all queued animations, and complete all animations for the element.\r\n  , finish: function(){\r\n\r\n      this.stop(true, false)\r\n\r\n      while(this.dequeue().situation && this.stop(true, false));\r\n\r\n      this.clearQueue().clearCurrent()\r\n\r\n      return this\r\n    }\r\n\r\n    // set the internal animation pointer at the start position, before any loops, and updates the visualisation\r\n  , atStart: function() {\r\n      return this.at(0, true)\r\n    }\r\n\r\n    // set the internal animation pointer at the end position, after all the loops, and updates the visualisation\r\n  , atEnd: function() {\r\n      if (this.situation.loops === true) {\r\n        // If in a infinite loop, we end the current iteration\r\n        this.situation.loops = this.situation.loop + 1\r\n      }\r\n\r\n      if(typeof this.situation.loops == 'number') {\r\n        // If performing a finite number of loops, we go after all the loops\r\n        return this.at(this.situation.loops, true)\r\n      } else {\r\n        // If no loops, we just go at the end\r\n        return this.at(1, true)\r\n      }\r\n    }\r\n\r\n    // set the internal animation pointer to the specified position and updates the visualisation\r\n    // if isAbsPos is true, pos is treated as an absolute position\r\n  , at: function(pos, isAbsPos){\r\n      var durDivSpd = this.situation.duration/this._speed\r\n\r\n      this.absPos = pos\r\n      // If pos is not an absolute position, we convert it into one\r\n      if (!isAbsPos) {\r\n        if (this.situation.reversed) this.absPos = 1 - this.absPos\r\n        this.absPos += this.situation.loop\r\n      }\r\n\r\n      this.situation.start = +new Date - this.absPos * durDivSpd\r\n      this.situation.finish = this.situation.start + durDivSpd\r\n\r\n      return this.step(true)\r\n    }\r\n\r\n    /**\r\n     * sets or returns the speed of the animations\r\n     * @param speed null || Number The new speed of the animations\r\n     * @return Number || this\r\n     */\r\n  , speed: function(speed){\r\n      if (speed === 0) return this.pause()\r\n\r\n      if (speed) {\r\n        this._speed = speed\r\n        // We use an absolute position here so that speed can affect the delay before the animation\r\n        return this.at(this.absPos, true)\r\n      } else return this._speed\r\n    }\r\n\r\n    // Make loopable\r\n  , loop: function(times, reverse) {\r\n      var c = this.last()\r\n\r\n      // store total loops\r\n      c.loops = (times != null) ? times : true\r\n      c.loop = 0\r\n\r\n      if(reverse) c.reversing = true\r\n      return this\r\n    }\r\n\r\n    // pauses the animation\r\n  , pause: function(){\r\n      this.paused = true\r\n      this.stopAnimFrame()\r\n\r\n      return this\r\n    }\r\n\r\n    // unpause the animation\r\n  , play: function(){\r\n      if(!this.paused) return this\r\n      this.paused = false\r\n      // We use an absolute position here so that the delay before the animation can be paused\r\n      return this.at(this.absPos, true)\r\n    }\r\n\r\n    /**\r\n     * toggle or set the direction of the animation\r\n     * true sets direction to backwards while false sets it to forwards\r\n     * @param reversed Boolean indicating whether to reverse the animation or not (default: toggle the reverse status)\r\n     * @return this\r\n     */\r\n  , reverse: function(reversed){\r\n      var c = this.last()\r\n\r\n      if(typeof reversed == 'undefined') c.reversed = !c.reversed\r\n      else c.reversed = reversed\r\n\r\n      return this\r\n    }\r\n\r\n\r\n    /**\r\n     * returns a float from 0-1 indicating the progress of the current animation\r\n     * @param eased Boolean indicating whether the returned position should be eased or not\r\n     * @return number\r\n     */\r\n  , progress: function(easeIt){\r\n      return easeIt ? this.situation.ease(this.pos) : this.pos\r\n    }\r\n\r\n    /**\r\n     * adds a callback function which is called when the current animation is finished\r\n     * @param fn Function which should be executed as callback\r\n     * @return number\r\n     */\r\n  , after: function(fn){\r\n      var c = this.last()\r\n        , wrapper = function wrapper(e){\r\n            if(e.detail.situation == c){\r\n              fn.call(this, c)\r\n              this.off('finished.fx', wrapper) // prevent memory leak\r\n            }\r\n          }\r\n\r\n      this.target().on('finished.fx', wrapper)\r\n\r\n      return this._callStart()\r\n    }\r\n\r\n    // adds a callback which is called whenever one animation step is performed\r\n  , during: function(fn){\r\n      var c = this.last()\r\n        , wrapper = function(e){\r\n            if(e.detail.situation == c){\r\n              fn.call(this, e.detail.pos, SVG.morph(e.detail.pos), e.detail.eased, c)\r\n            }\r\n          }\r\n\r\n      // see above\r\n      this.target().off('during.fx', wrapper).on('during.fx', wrapper)\r\n\r\n      this.after(function(){\r\n        this.off('during.fx', wrapper)\r\n      })\r\n\r\n      return this._callStart()\r\n    }\r\n\r\n    // calls after ALL animations in the queue are finished\r\n  , afterAll: function(fn){\r\n      var wrapper = function wrapper(e){\r\n            fn.call(this)\r\n            this.off('allfinished.fx', wrapper)\r\n          }\r\n\r\n      // see above\r\n      this.target().off('allfinished.fx', wrapper).on('allfinished.fx', wrapper)\r\n\r\n      return this._callStart()\r\n    }\r\n\r\n    // calls on every animation step for all animations\r\n  , duringAll: function(fn){\r\n      var wrapper = function(e){\r\n            fn.call(this, e.detail.pos, SVG.morph(e.detail.pos), e.detail.eased, e.detail.situation)\r\n          }\r\n\r\n      this.target().off('during.fx', wrapper).on('during.fx', wrapper)\r\n\r\n      this.afterAll(function(){\r\n        this.off('during.fx', wrapper)\r\n      })\r\n\r\n      return this._callStart()\r\n    }\r\n\r\n  , last: function(){\r\n      return this.situations.length ? this.situations[this.situations.length-1] : this.situation\r\n    }\r\n\r\n    // adds one property to the animations\r\n  , add: function(method, args, type){\r\n      this.last()[type || 'animations'][method] = args\r\n      return this._callStart()\r\n    }\r\n\r\n    /** perform one step of the animation\r\n     *  @param ignoreTime Boolean indicating whether to ignore time and use position directly or recalculate position based on time\r\n     *  @return this\r\n     */\r\n  , step: function(ignoreTime){\r\n\r\n      // convert current time to an absolute position\r\n      if(!ignoreTime) this.absPos = this.timeToAbsPos(+new Date)\r\n\r\n      // This part convert an absolute position to a position\r\n      if(this.situation.loops !== false) {\r\n        var absPos, absPosInt, lastLoop\r\n\r\n        // If the absolute position is below 0, we just treat it as if it was 0\r\n        absPos = Math.max(this.absPos, 0)\r\n        absPosInt = Math.floor(absPos)\r\n\r\n        if(this.situation.loops === true || absPosInt < this.situation.loops) {\r\n          this.pos = absPos - absPosInt\r\n          lastLoop = this.situation.loop\r\n          this.situation.loop = absPosInt\r\n        } else {\r\n          this.absPos = this.situation.loops\r\n          this.pos = 1\r\n          // The -1 here is because we don't want to toggle reversed when all the loops have been completed\r\n          lastLoop = this.situation.loop - 1\r\n          this.situation.loop = this.situation.loops\r\n        }\r\n\r\n        if(this.situation.reversing) {\r\n          // Toggle reversed if an odd number of loops as occured since the last call of step\r\n          this.situation.reversed = this.situation.reversed != Boolean((this.situation.loop - lastLoop) % 2)\r\n        }\r\n\r\n      } else {\r\n        // If there are no loop, the absolute position must not be above 1\r\n        this.absPos = Math.min(this.absPos, 1)\r\n        this.pos = this.absPos\r\n      }\r\n\r\n      // while the absolute position can be below 0, the position must not be below 0\r\n      if(this.pos < 0) this.pos = 0\r\n\r\n      if(this.situation.reversed) this.pos = 1 - this.pos\r\n\r\n\r\n      // apply easing\r\n      var eased = this.situation.ease(this.pos)\r\n\r\n      // call once-callbacks\r\n      for(var i in this.situation.once){\r\n        if(i > this.lastPos && i <= eased){\r\n          this.situation.once[i].call(this.target(), this.pos, eased)\r\n          delete this.situation.once[i]\r\n        }\r\n      }\r\n\r\n      // fire during callback with position, eased position and current situation as parameter\r\n      if(this.active) this.target().fire('during', {pos: this.pos, eased: eased, fx: this, situation: this.situation})\r\n\r\n      // the user may call stop or finish in the during callback\r\n      // so make sure that we still have a valid situation\r\n      if(!this.situation){\r\n        return this\r\n      }\r\n\r\n      // apply the actual animation to every property\r\n      this.eachAt()\r\n\r\n      // do final code when situation is finished\r\n      if((this.pos == 1 && !this.situation.reversed) || (this.situation.reversed && this.pos == 0)){\r\n\r\n        // stop animation callback\r\n        this.stopAnimFrame()\r\n\r\n        // fire finished callback with current situation as parameter\r\n        this.target().fire('finished', {fx:this, situation: this.situation})\r\n\r\n        if(!this.situations.length){\r\n          this.target().fire('allfinished')\r\n\r\n          // Recheck the length since the user may call animate in the afterAll callback\r\n          if(!this.situations.length){\r\n            this.target().off('.fx') // there shouldnt be any binding left, but to make sure...\r\n            this.active = false\r\n          }\r\n        }\r\n\r\n        // start next animation\r\n        if(this.active) this.dequeue()\r\n        else this.clearCurrent()\r\n\r\n      }else if(!this.paused && this.active){\r\n        // we continue animating when we are not at the end\r\n        this.startAnimFrame()\r\n      }\r\n\r\n      // save last eased position for once callback triggering\r\n      this.lastPos = eased\r\n      return this\r\n\r\n    }\r\n\r\n    // calculates the step for every property and calls block with it\r\n  , eachAt: function(){\r\n      var i, len, at, self = this, target = this.target(), s = this.situation\r\n\r\n      // apply animations which can be called trough a method\r\n      for(i in s.animations){\r\n\r\n        at = [].concat(s.animations[i]).map(function(el){\r\n          return typeof el !== 'string' && el.at ? el.at(s.ease(self.pos), self.pos) : el\r\n        })\r\n\r\n        target[i].apply(target, at)\r\n\r\n      }\r\n\r\n      // apply animation which has to be applied with attr()\r\n      for(i in s.attrs){\r\n\r\n        at = [i].concat(s.attrs[i]).map(function(el){\r\n          return typeof el !== 'string' && el.at ? el.at(s.ease(self.pos), self.pos) : el\r\n        })\r\n\r\n        target.attr.apply(target, at)\r\n\r\n      }\r\n\r\n      // apply animation which has to be applied with style()\r\n      for(i in s.styles){\r\n\r\n        at = [i].concat(s.styles[i]).map(function(el){\r\n          return typeof el !== 'string' && el.at ? el.at(s.ease(self.pos), self.pos) : el\r\n        })\r\n\r\n        target.style.apply(target, at)\r\n\r\n      }\r\n\r\n      // animate initialTransformation which has to be chained\r\n      if(s.transforms.length){\r\n\r\n        // get initial initialTransformation\r\n        at = s.initialTransformation\r\n        for(i = 0, len = s.transforms.length; i < len; i++){\r\n\r\n          // get next transformation in chain\r\n          var a = s.transforms[i]\r\n\r\n          // multiply matrix directly\r\n          if(a instanceof SVG.Matrix){\r\n\r\n            if(a.relative){\r\n              at = at.multiply(new SVG.Matrix().morph(a).at(s.ease(this.pos)))\r\n            }else{\r\n              at = at.morph(a).at(s.ease(this.pos))\r\n            }\r\n            continue\r\n          }\r\n\r\n          // when transformation is absolute we have to reset the needed transformation first\r\n          if(!a.relative)\r\n            a.undo(at.extract())\r\n\r\n          // and reapply it after\r\n          at = at.multiply(a.at(s.ease(this.pos)))\r\n\r\n        }\r\n\r\n        // set new matrix on element\r\n        target.matrix(at)\r\n      }\r\n\r\n      return this\r\n\r\n    }\r\n\r\n\r\n    // adds an once-callback which is called at a specific position and never again\r\n  , once: function(pos, fn, isEased){\r\n      var c = this.last()\r\n      if(!isEased) pos = c.ease(pos)\r\n\r\n      c.once[pos] = fn\r\n\r\n      return this\r\n    }\r\n\r\n  , _callStart: function() {\r\n      setTimeout(function(){this.start()}.bind(this), 0)\r\n      return this\r\n    }\r\n\r\n  }\r\n\r\n, parent: SVG.Element\r\n\r\n  // Add method to parent elements\r\n, construct: {\r\n    // Get fx module or create a new one, then animate with given duration and ease\r\n    animate: function(o, ease, delay) {\r\n      return (this.fx || (this.fx = new SVG.FX(this))).animate(o, ease, delay)\r\n    }\r\n  , delay: function(delay){\r\n      return (this.fx || (this.fx = new SVG.FX(this))).delay(delay)\r\n    }\r\n  , stop: function(jumpToEnd, clearQueue) {\r\n      if (this.fx)\r\n        this.fx.stop(jumpToEnd, clearQueue)\r\n\r\n      return this\r\n    }\r\n  , finish: function() {\r\n      if (this.fx)\r\n        this.fx.finish()\r\n\r\n      return this\r\n    }\r\n    // Pause current animation\r\n  , pause: function() {\r\n      if (this.fx)\r\n        this.fx.pause()\r\n\r\n      return this\r\n    }\r\n    // Play paused current animation\r\n  , play: function() {\r\n      if (this.fx)\r\n        this.fx.play()\r\n\r\n      return this\r\n    }\r\n    // Set/Get the speed of the animations\r\n  , speed: function(speed) {\r\n      if (this.fx)\r\n        if (speed == null)\r\n          return this.fx.speed()\r\n        else\r\n          this.fx.speed(speed)\r\n\r\n      return this\r\n    }\r\n  }\r\n\r\n})\r\n\r\n// MorphObj is used whenever no morphable object is given\r\nSVG.MorphObj = SVG.invent({\r\n\r\n  create: function(from, to){\r\n    // prepare color for morphing\r\n    if(SVG.Color.isColor(to)) return new SVG.Color(from).morph(to)\r\n    // prepare number for morphing\r\n    if(SVG.regex.numberAndUnit.test(to)) return new SVG.Number(from).morph(to)\r\n\r\n    // prepare for plain morphing\r\n    this.value = from\r\n    this.destination = to\r\n  }\r\n\r\n, extend: {\r\n    at: function(pos, real){\r\n      return real < 1 ? this.value : this.destination\r\n    },\r\n\r\n    valueOf: function(){\r\n      return this.value\r\n    }\r\n  }\r\n\r\n})\r\n\r\nSVG.extend(SVG.FX, {\r\n  // Add animatable attributes\r\n  attr: function(a, v, relative) {\r\n    // apply attributes individually\r\n    if (typeof a == 'object') {\r\n      for (var key in a)\r\n        this.attr(key, a[key])\r\n\r\n    } else {\r\n      this.add(a, v, 'attrs')\r\n    }\r\n\r\n    return this\r\n  }\r\n  // Add animatable styles\r\n, style: function(s, v) {\r\n    if (typeof s == 'object')\r\n      for (var key in s)\r\n        this.style(key, s[key])\r\n\r\n    else\r\n      this.add(s, v, 'styles')\r\n\r\n    return this\r\n  }\r\n  // Animatable x-axis\r\n, x: function(x, relative) {\r\n    if(this.target() instanceof SVG.G){\r\n      this.transform({x:x}, relative)\r\n      return this\r\n    }\r\n\r\n    var num = new SVG.Number(x)\r\n    num.relative = relative\r\n    return this.add('x', num)\r\n  }\r\n  // Animatable y-axis\r\n, y: function(y, relative) {\r\n    if(this.target() instanceof SVG.G){\r\n      this.transform({y:y}, relative)\r\n      return this\r\n    }\r\n\r\n    var num = new SVG.Number(y)\r\n    num.relative = relative\r\n    return this.add('y', num)\r\n  }\r\n  // Animatable center x-axis\r\n, cx: function(x) {\r\n    return this.add('cx', new SVG.Number(x))\r\n  }\r\n  // Animatable center y-axis\r\n, cy: function(y) {\r\n    return this.add('cy', new SVG.Number(y))\r\n  }\r\n  // Add animatable move\r\n, move: function(x, y) {\r\n    return this.x(x).y(y)\r\n  }\r\n  // Add animatable center\r\n, center: function(x, y) {\r\n    return this.cx(x).cy(y)\r\n  }\r\n  // Add animatable size\r\n, size: function(width, height) {\r\n    if (this.target() instanceof SVG.Text) {\r\n      // animate font size for Text elements\r\n      this.attr('font-size', width)\r\n\r\n    } else {\r\n      // animate bbox based size for all other elements\r\n      var box\r\n\r\n      if(!width || !height){\r\n        box = this.target().bbox()\r\n      }\r\n\r\n      if(!width){\r\n        width = box.width / box.height  * height\r\n      }\r\n\r\n      if(!height){\r\n        height = box.height / box.width  * width\r\n      }\r\n\r\n      this.add('width' , new SVG.Number(width))\r\n          .add('height', new SVG.Number(height))\r\n\r\n    }\r\n\r\n    return this\r\n  }\r\n  // Add animatable width\r\n, width: function(width) {\r\n    return this.add('width', new SVG.Number(width))\r\n  }\r\n  // Add animatable height\r\n, height: function(height) {\r\n    return this.add('height', new SVG.Number(height))\r\n  }\r\n  // Add animatable plot\r\n, plot: function(a, b, c, d) {\r\n    // Lines can be plotted with 4 arguments\r\n    if(arguments.length == 4) {\r\n      return this.plot([a, b, c, d])\r\n    }\r\n\r\n    return this.add('plot', new (this.target().morphArray)(a))\r\n  }\r\n  // Add leading method\r\n, leading: function(value) {\r\n    return this.target().leading ?\r\n      this.add('leading', new SVG.Number(value)) :\r\n      this\r\n  }\r\n  // Add animatable viewbox\r\n, viewbox: function(x, y, width, height) {\r\n    if (this.target() instanceof SVG.Container) {\r\n      this.add('viewbox', new SVG.ViewBox(x, y, width, height))\r\n    }\r\n\r\n    return this\r\n  }\r\n, update: function(o) {\r\n    if (this.target() instanceof SVG.Stop) {\r\n      if (typeof o == 'number' || o instanceof SVG.Number) {\r\n        return this.update({\r\n          offset:  arguments[0]\r\n        , color:   arguments[1]\r\n        , opacity: arguments[2]\r\n        })\r\n      }\r\n\r\n      if (o.opacity != null) this.attr('stop-opacity', o.opacity)\r\n      if (o.color   != null) this.attr('stop-color', o.color)\r\n      if (o.offset  != null) this.attr('offset', o.offset)\r\n    }\r\n\r\n    return this\r\n  }\r\n})\r\n\nSVG.Box = SVG.invent({\r\n  create: function(x, y, width, height) {\r\n    if (typeof x == 'object' && !(x instanceof SVG.Element)) {\r\n      // chromes getBoundingClientRect has no x and y property\r\n      return SVG.Box.call(this, x.left != null ? x.left : x.x , x.top != null ? x.top : x.y, x.width, x.height)\r\n    } else if (arguments.length == 4) {\r\n      this.x = x\r\n      this.y = y\r\n      this.width = width\r\n      this.height = height\r\n    }\r\n\r\n    // add center, right, bottom...\r\n    fullBox(this)\r\n  }\r\n, extend: {\r\n    // Merge rect box with another, return a new instance\r\n    merge: function(box) {\r\n      var b = new this.constructor()\r\n\r\n      // merge boxes\r\n      b.x      = Math.min(this.x, box.x)\r\n      b.y      = Math.min(this.y, box.y)\r\n      b.width  = Math.max(this.x + this.width,  box.x + box.width)  - b.x\r\n      b.height = Math.max(this.y + this.height, box.y + box.height) - b.y\r\n\r\n      return fullBox(b)\r\n    }\r\n\r\n  , transform: function(m) {\r\n      var xMin = Infinity, xMax = -Infinity, yMin = Infinity, yMax = -Infinity, p, bbox\r\n\r\n      var pts = [\r\n        new SVG.Point(this.x, this.y),\r\n        new SVG.Point(this.x2, this.y),\r\n        new SVG.Point(this.x, this.y2),\r\n        new SVG.Point(this.x2, this.y2)\r\n      ]\r\n\r\n      pts.forEach(function(p) {\r\n        p = p.transform(m)\r\n        xMin = Math.min(xMin,p.x)\r\n        xMax = Math.max(xMax,p.x)\r\n        yMin = Math.min(yMin,p.y)\r\n        yMax = Math.max(yMax,p.y)\r\n      })\r\n\r\n      bbox = new this.constructor()\r\n      bbox.x = xMin\r\n      bbox.width = xMax-xMin\r\n      bbox.y = yMin\r\n      bbox.height = yMax-yMin\r\n\r\n      fullBox(bbox)\r\n\r\n      return bbox\r\n    }\r\n  }\r\n})\r\n\r\nSVG.BBox = SVG.invent({\r\n  // Initialize\r\n  create: function(element) {\r\n    SVG.Box.apply(this, [].slice.call(arguments))\r\n\r\n    // get values if element is given\r\n    if (element instanceof SVG.Element) {\r\n      var box\r\n\r\n      // yes this is ugly, but Firefox can be a bitch when it comes to elements that are not yet rendered\r\n      try {\r\n\r\n        if (!document.documentElement.contains){\r\n          // This is IE - it does not support contains() for top-level SVGs\r\n          var topParent = element.node\r\n          while (topParent.parentNode){\r\n            topParent = topParent.parentNode\r\n          }\r\n          if (topParent != document) throw new Exception('Element not in the dom')\r\n        } else {\r\n          // the element is NOT in the dom, throw error\r\n          if(!document.documentElement.contains(element.node)) throw new Exception('Element not in the dom')\r\n        }\r\n\r\n        // find native bbox\r\n        box = element.node.getBBox()\r\n      } catch(e) {\r\n        if(element instanceof SVG.Shape){\r\n          var clone = element.clone(SVG.parser.draw.instance).show()\r\n          box = clone.node.getBBox()\r\n          clone.remove()\r\n        }else{\r\n          box = {\r\n            x:      element.node.clientLeft\r\n          , y:      element.node.clientTop\r\n          , width:  element.node.clientWidth\r\n          , height: element.node.clientHeight\r\n          }\r\n        }\r\n      }\r\n\r\n      SVG.Box.call(this, box)\r\n    }\r\n\r\n  }\r\n\r\n  // Define ancestor\r\n, inherit: SVG.Box\r\n\r\n  // Define Parent\r\n, parent: SVG.Element\r\n\r\n  // Constructor\r\n, construct: {\r\n    // Get bounding box\r\n    bbox: function() {\r\n      return new SVG.BBox(this)\r\n    }\r\n  }\r\n\r\n})\r\n\r\nSVG.BBox.prototype.constructor = SVG.BBox\r\n\r\n\r\nSVG.extend(SVG.Element, {\r\n  tbox: function(){\r\n    console.warn('Use of TBox is deprecated and mapped to RBox. Use .rbox() instead.')\r\n    return this.rbox(this.doc())\r\n  }\r\n})\r\n\r\nSVG.RBox = SVG.invent({\r\n  // Initialize\r\n  create: function(element) {\r\n    SVG.Box.apply(this, [].slice.call(arguments))\r\n\r\n    if (element instanceof SVG.Element) {\r\n      SVG.Box.call(this, element.node.getBoundingClientRect())\r\n    }\r\n  }\r\n\r\n, inherit: SVG.Box\r\n\r\n  // define Parent\r\n, parent: SVG.Element\r\n\r\n, extend: {\r\n    addOffset: function() {\r\n      // offset by window scroll position, because getBoundingClientRect changes when window is scrolled\r\n      this.x += window.pageXOffset\r\n      this.y += window.pageYOffset\r\n      return this\r\n    }\r\n  }\r\n\r\n  // Constructor\r\n, construct: {\r\n    // Get rect box\r\n    rbox: function(el) {\r\n      if (el) return new SVG.RBox(this).transform(el.screenCTM().inverse())\r\n      return new SVG.RBox(this).addOffset()\r\n    }\r\n  }\r\n\r\n})\r\n\r\nSVG.RBox.prototype.constructor = SVG.RBox\r\n\nSVG.Matrix = SVG.invent({\r\n  // Initialize\r\n  create: function(source) {\r\n    var i, base = arrayToMatrix([1, 0, 0, 1, 0, 0])\r\n\r\n    // ensure source as object\r\n    source = source instanceof SVG.Element ?\r\n      source.matrixify() :\r\n    typeof source === 'string' ?\r\n      arrayToMatrix(source.split(SVG.regex.delimiter).map(parseFloat)) :\r\n    arguments.length == 6 ?\r\n      arrayToMatrix([].slice.call(arguments)) :\r\n    Array.isArray(source) ?\r\n      arrayToMatrix(source) :\r\n    typeof source === 'object' ?\r\n      source : base\r\n\r\n    // merge source\r\n    for (i = abcdef.length - 1; i >= 0; --i)\r\n      this[abcdef[i]] = source[abcdef[i]] != null ?\r\n        source[abcdef[i]] : base[abcdef[i]]\r\n  }\r\n\r\n  // Add methods\r\n, extend: {\r\n    // Extract individual transformations\r\n    extract: function() {\r\n      // find delta transform points\r\n      var px    = deltaTransformPoint(this, 0, 1)\r\n        , py    = deltaTransformPoint(this, 1, 0)\r\n        , skewX = 180 / Math.PI * Math.atan2(px.y, px.x) - 90\r\n\r\n      return {\r\n        // translation\r\n        x:        this.e\r\n      , y:        this.f\r\n      , transformedX:(this.e * Math.cos(skewX * Math.PI / 180) + this.f * Math.sin(skewX * Math.PI / 180)) / Math.sqrt(this.a * this.a + this.b * this.b)\r\n      , transformedY:(this.f * Math.cos(skewX * Math.PI / 180) + this.e * Math.sin(-skewX * Math.PI / 180)) / Math.sqrt(this.c * this.c + this.d * this.d)\r\n        // skew\r\n      , skewX:    -skewX\r\n      , skewY:    180 / Math.PI * Math.atan2(py.y, py.x)\r\n        // scale\r\n      , scaleX:   Math.sqrt(this.a * this.a + this.b * this.b)\r\n      , scaleY:   Math.sqrt(this.c * this.c + this.d * this.d)\r\n        // rotation\r\n      , rotation: skewX\r\n      , a: this.a\r\n      , b: this.b\r\n      , c: this.c\r\n      , d: this.d\r\n      , e: this.e\r\n      , f: this.f\r\n      , matrix: new SVG.Matrix(this)\r\n      }\r\n    }\r\n    // Clone matrix\r\n  , clone: function() {\r\n      return new SVG.Matrix(this)\r\n    }\r\n    // Morph one matrix into another\r\n  , morph: function(matrix) {\r\n      // store new destination\r\n      this.destination = new SVG.Matrix(matrix)\r\n\r\n      return this\r\n    }\r\n    // Get morphed matrix at a given position\r\n  , at: function(pos) {\r\n      // make sure a destination is defined\r\n      if (!this.destination) return this\r\n\r\n      // calculate morphed matrix at a given position\r\n      var matrix = new SVG.Matrix({\r\n        a: this.a + (this.destination.a - this.a) * pos\r\n      , b: this.b + (this.destination.b - this.b) * pos\r\n      , c: this.c + (this.destination.c - this.c) * pos\r\n      , d: this.d + (this.destination.d - this.d) * pos\r\n      , e: this.e + (this.destination.e - this.e) * pos\r\n      , f: this.f + (this.destination.f - this.f) * pos\r\n      })\r\n\r\n      return matrix\r\n    }\r\n    // Multiplies by given matrix\r\n  , multiply: function(matrix) {\r\n      return new SVG.Matrix(this.native().multiply(parseMatrix(matrix).native()))\r\n    }\r\n    // Inverses matrix\r\n  , inverse: function() {\r\n      return new SVG.Matrix(this.native().inverse())\r\n    }\r\n    // Translate matrix\r\n  , translate: function(x, y) {\r\n      return new SVG.Matrix(this.native().translate(x || 0, y || 0))\r\n    }\r\n    // Scale matrix\r\n  , scale: function(x, y, cx, cy) {\r\n      // support uniformal scale\r\n      if (arguments.length == 1) {\r\n        y = x\r\n      } else if (arguments.length == 3) {\r\n        cy = cx\r\n        cx = y\r\n        y = x\r\n      }\r\n\r\n      return this.around(cx, cy, new SVG.Matrix(x, 0, 0, y, 0, 0))\r\n    }\r\n    // Rotate matrix\r\n  , rotate: function(r, cx, cy) {\r\n      // convert degrees to radians\r\n      r = SVG.utils.radians(r)\r\n\r\n      return this.around(cx, cy, new SVG.Matrix(Math.cos(r), Math.sin(r), -Math.sin(r), Math.cos(r), 0, 0))\r\n    }\r\n    // Flip matrix on x or y, at a given offset\r\n  , flip: function(a, o) {\r\n      return a == 'x' ?\r\n          this.scale(-1, 1, o, 0) :\r\n        a == 'y' ?\r\n          this.scale(1, -1, 0, o) :\r\n          this.scale(-1, -1, a, o != null ? o : a)\r\n    }\r\n    // Skew\r\n  , skew: function(x, y, cx, cy) {\r\n      // support uniformal skew\r\n      if (arguments.length == 1) {\r\n        y = x\r\n      } else if (arguments.length == 3) {\r\n        cy = cx\r\n        cx = y\r\n        y = x\r\n      }\r\n\r\n      // convert degrees to radians\r\n      x = SVG.utils.radians(x)\r\n      y = SVG.utils.radians(y)\r\n\r\n      return this.around(cx, cy, new SVG.Matrix(1, Math.tan(y), Math.tan(x), 1, 0, 0))\r\n    }\r\n    // SkewX\r\n  , skewX: function(x, cx, cy) {\r\n      return this.skew(x, 0, cx, cy)\r\n    }\r\n    // SkewY\r\n  , skewY: function(y, cx, cy) {\r\n      return this.skew(0, y, cx, cy)\r\n    }\r\n    // Transform around a center point\r\n  , around: function(cx, cy, matrix) {\r\n      return this\r\n        .multiply(new SVG.Matrix(1, 0, 0, 1, cx || 0, cy || 0))\r\n        .multiply(matrix)\r\n        .multiply(new SVG.Matrix(1, 0, 0, 1, -cx || 0, -cy || 0))\r\n    }\r\n    // Convert to native SVGMatrix\r\n  , native: function() {\r\n      // create new matrix\r\n      var matrix = SVG.parser.native.createSVGMatrix()\r\n\r\n      // update with current values\r\n      for (var i = abcdef.length - 1; i >= 0; i--)\r\n        matrix[abcdef[i]] = this[abcdef[i]]\r\n\r\n      return matrix\r\n    }\r\n    // Convert matrix to string\r\n  , toString: function() {\r\n      return 'matrix(' + this.a + ',' + this.b + ',' + this.c + ',' + this.d + ',' + this.e + ',' + this.f + ')'\r\n    }\r\n  }\r\n\r\n  // Define parent\r\n, parent: SVG.Element\r\n\r\n  // Add parent method\r\n, construct: {\r\n    // Get current matrix\r\n    ctm: function() {\r\n      return new SVG.Matrix(this.node.getCTM())\r\n    },\r\n    // Get current screen matrix\r\n    screenCTM: function() {\r\n      /* https://bugzilla.mozilla.org/show_bug.cgi?id=1344537\r\n         This is needed because FF does not return the transformation matrix\r\n         for the inner coordinate system when getScreenCTM() is called on nested svgs.\r\n         However all other Browsers do that */\r\n      if(this instanceof SVG.Nested) {\r\n        var rect = this.rect(1,1)\r\n        var m = rect.node.getScreenCTM()\r\n        rect.remove()\r\n        return new SVG.Matrix(m)\r\n      }\r\n      return new SVG.Matrix(this.node.getScreenCTM())\r\n    }\r\n\r\n  }\r\n\r\n})\r\n\nSVG.Point = SVG.invent({\r\n  // Initialize\r\n  create: function(x,y) {\r\n    var i, source, base = {x:0, y:0}\r\n\r\n    // ensure source as object\r\n    source = Array.isArray(x) ?\r\n      {x:x[0], y:x[1]} :\r\n    typeof x === 'object' ?\r\n      {x:x.x, y:x.y} :\r\n    x != null ?\r\n      {x:x, y:(y != null ? y : x)} : base // If y has no value, then x is used has its value\r\n\r\n    // merge source\r\n    this.x = source.x\r\n    this.y = source.y\r\n  }\r\n\r\n  // Add methods\r\n, extend: {\r\n    // Clone point\r\n    clone: function() {\r\n      return new SVG.Point(this)\r\n    }\r\n    // Morph one point into another\r\n  , morph: function(x, y) {\r\n      // store new destination\r\n      this.destination = new SVG.Point(x, y)\r\n\r\n      return this\r\n    }\r\n    // Get morphed point at a given position\r\n  , at: function(pos) {\r\n      // make sure a destination is defined\r\n      if (!this.destination) return this\r\n\r\n      // calculate morphed matrix at a given position\r\n      var point = new SVG.Point({\r\n        x: this.x + (this.destination.x - this.x) * pos\r\n      , y: this.y + (this.destination.y - this.y) * pos\r\n      })\r\n\r\n      return point\r\n    }\r\n    // Convert to native SVGPoint\r\n  , native: function() {\r\n      // create new point\r\n      var point = SVG.parser.native.createSVGPoint()\r\n\r\n      // update with current values\r\n      point.x = this.x\r\n      point.y = this.y\r\n\r\n      return point\r\n    }\r\n    // transform point with matrix\r\n  , transform: function(matrix) {\r\n      return new SVG.Point(this.native().matrixTransform(matrix.native()))\r\n    }\r\n\r\n  }\r\n\r\n})\r\n\r\nSVG.extend(SVG.Element, {\r\n\r\n  // Get point\r\n  point: function(x, y) {\r\n    return new SVG.Point(x,y).transform(this.screenCTM().inverse());\r\n  }\r\n\r\n})\r\n\nSVG.extend(SVG.Element, {\r\n  // Set svg element attribute\r\n  attr: function(a, v, n) {\r\n    // act as full getter\r\n    if (a == null) {\r\n      // get an object of attributes\r\n      a = {}\r\n      v = this.node.attributes\r\n      for (n = v.length - 1; n >= 0; n--)\r\n        a[v[n].nodeName] = SVG.regex.isNumber.test(v[n].nodeValue) ? parseFloat(v[n].nodeValue) : v[n].nodeValue\r\n\r\n      return a\r\n\r\n    } else if (typeof a == 'object') {\r\n      // apply every attribute individually if an object is passed\r\n      for (v in a) this.attr(v, a[v])\r\n\r\n    } else if (v === null) {\r\n        // remove value\r\n        this.node.removeAttribute(a)\r\n\r\n    } else if (v == null) {\r\n      // act as a getter if the first and only argument is not an object\r\n      v = this.node.getAttribute(a)\r\n      return v == null ?\r\n        SVG.defaults.attrs[a] :\r\n      SVG.regex.isNumber.test(v) ?\r\n        parseFloat(v) : v\r\n\r\n    } else {\r\n      // BUG FIX: some browsers will render a stroke if a color is given even though stroke width is 0\r\n      if (a == 'stroke-width')\r\n        this.attr('stroke', parseFloat(v) > 0 ? this._stroke : null)\r\n      else if (a == 'stroke')\r\n        this._stroke = v\r\n\r\n      // convert image fill and stroke to patterns\r\n      if (a == 'fill' || a == 'stroke') {\r\n        if (SVG.regex.isImage.test(v))\r\n          v = this.doc().defs().image(v, 0, 0)\r\n\r\n        if (v instanceof SVG.Image)\r\n          v = this.doc().defs().pattern(0, 0, function() {\r\n            this.add(v)\r\n          })\r\n      }\r\n\r\n      // ensure correct numeric values (also accepts NaN and Infinity)\r\n      if (typeof v === 'number')\r\n        v = new SVG.Number(v)\r\n\r\n      // ensure full hex color\r\n      else if (SVG.Color.isColor(v))\r\n        v = new SVG.Color(v)\r\n\r\n      // parse array values\r\n      else if (Array.isArray(v))\r\n        v = new SVG.Array(v)\r\n\r\n      // if the passed attribute is leading...\r\n      if (a == 'leading') {\r\n        // ... call the leading method instead\r\n        if (this.leading)\r\n          this.leading(v)\r\n      } else {\r\n        // set given attribute on node\r\n        typeof n === 'string' ?\r\n          this.node.setAttributeNS(n, a, v.toString()) :\r\n          this.node.setAttribute(a, v.toString())\r\n      }\r\n\r\n      // rebuild if required\r\n      if (this.rebuild && (a == 'font-size' || a == 'x'))\r\n        this.rebuild(a, v)\r\n    }\r\n\r\n    return this\r\n  }\r\n})\nSVG.extend(SVG.Element, {\r\n  // Add transformations\r\n  transform: function(o, relative) {\r\n    // get target in case of the fx module, otherwise reference this\r\n    var target = this\r\n      , matrix, bbox\r\n\r\n    // act as a getter\r\n    if (typeof o !== 'object') {\r\n      // get current matrix\r\n      matrix = new SVG.Matrix(target).extract()\r\n\r\n      return typeof o === 'string' ? matrix[o] : matrix\r\n    }\r\n\r\n    // get current matrix\r\n    matrix = new SVG.Matrix(target)\r\n\r\n    // ensure relative flag\r\n    relative = !!relative || !!o.relative\r\n\r\n    // act on matrix\r\n    if (o.a != null) {\r\n      matrix = relative ?\r\n        // relative\r\n        matrix.multiply(new SVG.Matrix(o)) :\r\n        // absolute\r\n        new SVG.Matrix(o)\r\n\r\n    // act on rotation\r\n    } else if (o.rotation != null) {\r\n      // ensure centre point\r\n      ensureCentre(o, target)\r\n\r\n      // apply transformation\r\n      matrix = relative ?\r\n        // relative\r\n        matrix.rotate(o.rotation, o.cx, o.cy) :\r\n        // absolute\r\n        matrix.rotate(o.rotation - matrix.extract().rotation, o.cx, o.cy)\r\n\r\n    // act on scale\r\n    } else if (o.scale != null || o.scaleX != null || o.scaleY != null) {\r\n      // ensure centre point\r\n      ensureCentre(o, target)\r\n\r\n      // ensure scale values on both axes\r\n      o.scaleX = o.scale != null ? o.scale : o.scaleX != null ? o.scaleX : 1\r\n      o.scaleY = o.scale != null ? o.scale : o.scaleY != null ? o.scaleY : 1\r\n\r\n      if (!relative) {\r\n        // absolute; multiply inversed values\r\n        var e = matrix.extract()\r\n        o.scaleX = o.scaleX * 1 / e.scaleX\r\n        o.scaleY = o.scaleY * 1 / e.scaleY\r\n      }\r\n\r\n      matrix = matrix.scale(o.scaleX, o.scaleY, o.cx, o.cy)\r\n\r\n    // act on skew\r\n    } else if (o.skew != null || o.skewX != null || o.skewY != null) {\r\n      // ensure centre point\r\n      ensureCentre(o, target)\r\n\r\n      // ensure skew values on both axes\r\n      o.skewX = o.skew != null ? o.skew : o.skewX != null ? o.skewX : 0\r\n      o.skewY = o.skew != null ? o.skew : o.skewY != null ? o.skewY : 0\r\n\r\n      if (!relative) {\r\n        // absolute; reset skew values\r\n        var e = matrix.extract()\r\n        matrix = matrix.multiply(new SVG.Matrix().skew(e.skewX, e.skewY, o.cx, o.cy).inverse())\r\n      }\r\n\r\n      matrix = matrix.skew(o.skewX, o.skewY, o.cx, o.cy)\r\n\r\n    // act on flip\r\n    } else if (o.flip) {\r\n      if(o.flip == 'x' || o.flip == 'y') {\r\n        o.offset = o.offset == null ? target.bbox()['c' + o.flip] : o.offset\r\n      } else {\r\n        if(o.offset == null) {\r\n          bbox = target.bbox()\r\n          o.flip = bbox.cx\r\n          o.offset = bbox.cy\r\n        } else {\r\n          o.flip = o.offset\r\n        }\r\n      }\r\n\r\n      matrix = new SVG.Matrix().flip(o.flip, o.offset)\r\n\r\n    // act on translate\r\n    } else if (o.x != null || o.y != null) {\r\n      if (relative) {\r\n        // relative\r\n        matrix = matrix.translate(o.x, o.y)\r\n      } else {\r\n        // absolute\r\n        if (o.x != null) matrix.e = o.x\r\n        if (o.y != null) matrix.f = o.y\r\n      }\r\n    }\r\n\r\n    return this.attr('transform', matrix)\r\n  }\r\n})\r\n\r\nSVG.extend(SVG.FX, {\r\n  transform: function(o, relative) {\r\n    // get target in case of the fx module, otherwise reference this\r\n    var target = this.target()\r\n      , matrix, bbox\r\n\r\n    // act as a getter\r\n    if (typeof o !== 'object') {\r\n      // get current matrix\r\n      matrix = new SVG.Matrix(target).extract()\r\n\r\n      return typeof o === 'string' ? matrix[o] : matrix\r\n    }\r\n\r\n    // ensure relative flag\r\n    relative = !!relative || !!o.relative\r\n\r\n    // act on matrix\r\n    if (o.a != null) {\r\n      matrix = new SVG.Matrix(o)\r\n\r\n    // act on rotation\r\n    } else if (o.rotation != null) {\r\n      // ensure centre point\r\n      ensureCentre(o, target)\r\n\r\n      // apply transformation\r\n      matrix = new SVG.Rotate(o.rotation, o.cx, o.cy)\r\n\r\n    // act on scale\r\n    } else if (o.scale != null || o.scaleX != null || o.scaleY != null) {\r\n      // ensure centre point\r\n      ensureCentre(o, target)\r\n\r\n      // ensure scale values on both axes\r\n      o.scaleX = o.scale != null ? o.scale : o.scaleX != null ? o.scaleX : 1\r\n      o.scaleY = o.scale != null ? o.scale : o.scaleY != null ? o.scaleY : 1\r\n\r\n      matrix = new SVG.Scale(o.scaleX, o.scaleY, o.cx, o.cy)\r\n\r\n    // act on skew\r\n    } else if (o.skewX != null || o.skewY != null) {\r\n      // ensure centre point\r\n      ensureCentre(o, target)\r\n\r\n      // ensure skew values on both axes\r\n      o.skewX = o.skewX != null ? o.skewX : 0\r\n      o.skewY = o.skewY != null ? o.skewY : 0\r\n\r\n      matrix = new SVG.Skew(o.skewX, o.skewY, o.cx, o.cy)\r\n\r\n    // act on flip\r\n    } else if (o.flip) {\r\n      if(o.flip == 'x' || o.flip == 'y') {\r\n        o.offset = o.offset == null ? target.bbox()['c' + o.flip] : o.offset\r\n      } else {\r\n        if(o.offset == null) {\r\n          bbox = target.bbox()\r\n          o.flip = bbox.cx\r\n          o.offset = bbox.cy\r\n        } else {\r\n          o.flip = o.offset\r\n        }\r\n      }\r\n\r\n      matrix = new SVG.Matrix().flip(o.flip, o.offset)\r\n\r\n    // act on translate\r\n    } else if (o.x != null || o.y != null) {\r\n      matrix = new SVG.Translate(o.x, o.y)\r\n    }\r\n\r\n    if(!matrix) return this\r\n\r\n    matrix.relative = relative\r\n\r\n    this.last().transforms.push(matrix)\r\n\r\n    return this._callStart()\r\n  }\r\n})\r\n\r\nSVG.extend(SVG.Element, {\r\n  // Reset all transformations\r\n  untransform: function() {\r\n    return this.attr('transform', null)\r\n  },\r\n  // merge the whole transformation chain into one matrix and returns it\r\n  matrixify: function() {\r\n\r\n    var matrix = (this.attr('transform') || '')\r\n      // split transformations\r\n      .split(SVG.regex.transforms).slice(0,-1).map(function(str){\r\n        // generate key => value pairs\r\n        var kv = str.trim().split('(')\r\n        return [kv[0], kv[1].split(SVG.regex.delimiter).map(function(str){ return parseFloat(str) })]\r\n      })\r\n      // merge every transformation into one matrix\r\n      .reduce(function(matrix, transform){\r\n\r\n        if(transform[0] == 'matrix') return matrix.multiply(arrayToMatrix(transform[1]))\r\n        return matrix[transform[0]].apply(matrix, transform[1])\r\n\r\n      }, new SVG.Matrix())\r\n\r\n    return matrix\r\n  },\r\n  // add an element to another parent without changing the visual representation on the screen\r\n  toParent: function(parent) {\r\n    if(this == parent) return this\r\n    var ctm = this.screenCTM()\r\n    var pCtm = parent.screenCTM().inverse()\r\n\r\n    this.addTo(parent).untransform().transform(pCtm.multiply(ctm))\r\n\r\n    return this\r\n  },\r\n  // same as above with parent equals root-svg\r\n  toDoc: function() {\r\n    return this.toParent(this.doc())\r\n  }\r\n\r\n})\r\n\r\nSVG.Transformation = SVG.invent({\r\n\r\n  create: function(source, inversed){\r\n\r\n    if(arguments.length > 1 && typeof inversed != 'boolean'){\r\n      return this.constructor.call(this, [].slice.call(arguments))\r\n    }\r\n\r\n    if(Array.isArray(source)){\r\n      for(var i = 0, len = this.arguments.length; i < len; ++i){\r\n        this[this.arguments[i]] = source[i]\r\n      }\r\n    } else if(typeof source == 'object'){\r\n      for(var i = 0, len = this.arguments.length; i < len; ++i){\r\n        this[this.arguments[i]] = source[this.arguments[i]]\r\n      }\r\n    }\r\n\r\n    this.inversed = false\r\n\r\n    if(inversed === true){\r\n      this.inversed = true\r\n    }\r\n\r\n  }\r\n\r\n, extend: {\r\n\r\n    arguments: []\r\n  , method: ''\r\n\r\n  , at: function(pos){\r\n\r\n      var params = []\r\n\r\n      for(var i = 0, len = this.arguments.length; i < len; ++i){\r\n        params.push(this[this.arguments[i]])\r\n      }\r\n\r\n      var m = this._undo || new SVG.Matrix()\r\n\r\n      m = new SVG.Matrix().morph(SVG.Matrix.prototype[this.method].apply(m, params)).at(pos)\r\n\r\n      return this.inversed ? m.inverse() : m\r\n\r\n    }\r\n\r\n  , undo: function(o){\r\n      for(var i = 0, len = this.arguments.length; i < len; ++i){\r\n        o[this.arguments[i]] = typeof this[this.arguments[i]] == 'undefined' ? 0 : o[this.arguments[i]]\r\n      }\r\n\r\n      // The method SVG.Matrix.extract which was used before calling this\r\n      // method to obtain a value for the parameter o doesn't return a cx and\r\n      // a cy so we use the ones that were provided to this object at its creation\r\n      o.cx = this.cx\r\n      o.cy = this.cy\r\n\r\n      this._undo = new SVG[capitalize(this.method)](o, true).at(1)\r\n\r\n      return this\r\n    }\r\n\r\n  }\r\n\r\n})\r\n\r\nSVG.Translate = SVG.invent({\r\n\r\n  parent: SVG.Matrix\r\n, inherit: SVG.Transformation\r\n\r\n, create: function(source, inversed){\r\n    this.constructor.apply(this, [].slice.call(arguments))\r\n  }\r\n\r\n, extend: {\r\n    arguments: ['transformedX', 'transformedY']\r\n  , method: 'translate'\r\n  }\r\n\r\n})\r\n\r\nSVG.Rotate = SVG.invent({\r\n\r\n  parent: SVG.Matrix\r\n, inherit: SVG.Transformation\r\n\r\n, create: function(source, inversed){\r\n    this.constructor.apply(this, [].slice.call(arguments))\r\n  }\r\n\r\n, extend: {\r\n    arguments: ['rotation', 'cx', 'cy']\r\n  , method: 'rotate'\r\n  , at: function(pos){\r\n      var m = new SVG.Matrix().rotate(new SVG.Number().morph(this.rotation - (this._undo ? this._undo.rotation : 0)).at(pos), this.cx, this.cy)\r\n      return this.inversed ? m.inverse() : m\r\n    }\r\n  , undo: function(o){\r\n      this._undo = o\r\n      return this\r\n    }\r\n  }\r\n\r\n})\r\n\r\nSVG.Scale = SVG.invent({\r\n\r\n  parent: SVG.Matrix\r\n, inherit: SVG.Transformation\r\n\r\n, create: function(source, inversed){\r\n    this.constructor.apply(this, [].slice.call(arguments))\r\n  }\r\n\r\n, extend: {\r\n    arguments: ['scaleX', 'scaleY', 'cx', 'cy']\r\n  , method: 'scale'\r\n  }\r\n\r\n})\r\n\r\nSVG.Skew = SVG.invent({\r\n\r\n  parent: SVG.Matrix\r\n, inherit: SVG.Transformation\r\n\r\n, create: function(source, inversed){\r\n    this.constructor.apply(this, [].slice.call(arguments))\r\n  }\r\n\r\n, extend: {\r\n    arguments: ['skewX', 'skewY', 'cx', 'cy']\r\n  , method: 'skew'\r\n  }\r\n\r\n})\r\n\nSVG.extend(SVG.Element, {\r\n  // Dynamic style generator\r\n  style: function(s, v) {\r\n    if (arguments.length == 0) {\r\n      // get full style\r\n      return this.node.style.cssText || ''\r\n\r\n    } else if (arguments.length < 2) {\r\n      // apply every style individually if an object is passed\r\n      if (typeof s == 'object') {\r\n        for (v in s) this.style(v, s[v])\r\n\r\n      } else if (SVG.regex.isCss.test(s)) {\r\n        // parse css string\r\n        s = s.split(/\\s*;\\s*/)\r\n          // filter out suffix ; and stuff like ;;\r\n          .filter(function(e) { return !!e })\r\n          .map(function(e){ return e.split(/\\s*:\\s*/) })\r\n\r\n        // apply every definition individually\r\n        while (v = s.pop()) {\r\n          this.style(v[0], v[1])\r\n        }\r\n      } else {\r\n        // act as a getter if the first and only argument is not an object\r\n        return this.node.style[camelCase(s)]\r\n      }\r\n\r\n    } else {\r\n      this.node.style[camelCase(s)] = v === null || SVG.regex.isBlank.test(v) ? '' : v\r\n    }\r\n\r\n    return this\r\n  }\r\n})\nSVG.Parent = SVG.invent({\r\n  // Initialize node\r\n  create: function(element) {\r\n    this.constructor.call(this, element)\r\n  }\r\n\r\n  // Inherit from\r\n, inherit: SVG.Element\r\n\r\n  // Add class methods\r\n, extend: {\r\n    // Returns all child elements\r\n    children: function() {\r\n      return SVG.utils.map(SVG.utils.filterSVGElements(this.node.childNodes), function(node) {\r\n        return SVG.adopt(node)\r\n      })\r\n    }\r\n    // Add given element at a position\r\n  , add: function(element, i) {\r\n      if (i == null)\r\n        this.node.appendChild(element.node)\r\n      else if (element.node != this.node.childNodes[i])\r\n        this.node.insertBefore(element.node, this.node.childNodes[i])\r\n\r\n      return this\r\n    }\r\n    // Basically does the same as `add()` but returns the added element instead\r\n  , put: function(element, i) {\r\n      this.add(element, i)\r\n      return element\r\n    }\r\n    // Checks if the given element is a child\r\n  , has: function(element) {\r\n      return this.index(element) >= 0\r\n    }\r\n    // Gets index of given element\r\n  , index: function(element) {\r\n      return [].slice.call(this.node.childNodes).indexOf(element.node)\r\n    }\r\n    // Get a element at the given index\r\n  , get: function(i) {\r\n      return SVG.adopt(this.node.childNodes[i])\r\n    }\r\n    // Get first child\r\n  , first: function() {\r\n      return this.get(0)\r\n    }\r\n    // Get the last child\r\n  , last: function() {\r\n      return this.get(this.node.childNodes.length - 1)\r\n    }\r\n    // Iterates over all children and invokes a given block\r\n  , each: function(block, deep) {\r\n      var i, il\r\n        , children = this.children()\r\n\r\n      for (i = 0, il = children.length; i < il; i++) {\r\n        if (children[i] instanceof SVG.Element)\r\n          block.apply(children[i], [i, children])\r\n\r\n        if (deep && (children[i] instanceof SVG.Container))\r\n          children[i].each(block, deep)\r\n      }\r\n\r\n      return this\r\n    }\r\n    // Remove a given child\r\n  , removeElement: function(element) {\r\n      this.node.removeChild(element.node)\r\n\r\n      return this\r\n    }\r\n    // Remove all elements in this container\r\n  , clear: function() {\r\n      // remove children\r\n      while(this.node.hasChildNodes())\r\n        this.node.removeChild(this.node.lastChild)\r\n\r\n      // remove defs reference\r\n      delete this._defs\r\n\r\n      return this\r\n    }\r\n  , // Get defs\r\n    defs: function() {\r\n      return this.doc().defs()\r\n    }\r\n  }\r\n\r\n})\r\n\nSVG.extend(SVG.Parent, {\r\n\r\n  ungroup: function(parent, depth) {\r\n    if(depth === 0 || this instanceof SVG.Defs || this.node == SVG.parser.draw) return this\r\n\r\n    parent = parent || (this instanceof SVG.Doc ? this : this.parent(SVG.Parent))\r\n    depth = depth || Infinity\r\n\r\n    this.each(function(){\r\n      if(this instanceof SVG.Defs) return this\r\n      if(this instanceof SVG.Parent) return this.ungroup(parent, depth-1)\r\n      return this.toParent(parent)\r\n    })\r\n\r\n    this.node.firstChild || this.remove()\r\n\r\n    return this\r\n  },\r\n\r\n  flatten: function(parent, depth) {\r\n    return this.ungroup(parent, depth)\r\n  }\r\n\r\n})\nSVG.Container = SVG.invent({\r\n  // Initialize node\r\n  create: function(element) {\r\n    this.constructor.call(this, element)\r\n  }\r\n\r\n  // Inherit from\r\n, inherit: SVG.Parent\r\n\r\n})\n\r\nSVG.ViewBox = SVG.invent({\r\n\r\n  create: function(source) {\r\n    var i, base = [0, 0, 0, 0]\r\n\r\n    var x, y, width, height, box, view, we, he\r\n      , wm   = 1 // width multiplier\r\n      , hm   = 1 // height multiplier\r\n      , reg  = /[+-]?(?:\\d+(?:\\.\\d*)?|\\.\\d+)(?:e[+-]?\\d+)?/gi\r\n\r\n    if(source instanceof SVG.Element){\r\n\r\n      we = source\r\n      he = source\r\n      view = (source.attr('viewBox') || '').match(reg)\r\n      box = source.bbox\r\n\r\n      // get dimensions of current node\r\n      width  = new SVG.Number(source.width())\r\n      height = new SVG.Number(source.height())\r\n\r\n      // find nearest non-percentual dimensions\r\n      while (width.unit == '%') {\r\n        wm *= width.value\r\n        width = new SVG.Number(we instanceof SVG.Doc ? we.parent().offsetWidth : we.parent().width())\r\n        we = we.parent()\r\n      }\r\n      while (height.unit == '%') {\r\n        hm *= height.value\r\n        height = new SVG.Number(he instanceof SVG.Doc ? he.parent().offsetHeight : he.parent().height())\r\n        he = he.parent()\r\n      }\r\n\r\n      // ensure defaults\r\n      this.x      = 0\r\n      this.y      = 0\r\n      this.width  = width  * wm\r\n      this.height = height * hm\r\n      this.zoom   = 1\r\n\r\n      if (view) {\r\n        // get width and height from viewbox\r\n        x      = parseFloat(view[0])\r\n        y      = parseFloat(view[1])\r\n        width  = parseFloat(view[2])\r\n        height = parseFloat(view[3])\r\n\r\n        // calculate zoom accoring to viewbox\r\n        this.zoom = ((this.width / this.height) > (width / height)) ?\r\n          this.height / height :\r\n          this.width  / width\r\n\r\n        // calculate real pixel dimensions on parent SVG.Doc element\r\n        this.x      = x\r\n        this.y      = y\r\n        this.width  = width\r\n        this.height = height\r\n\r\n      }\r\n\r\n    }else{\r\n\r\n      // ensure source as object\r\n      source = typeof source === 'string' ?\r\n        source.match(reg).map(function(el){ return parseFloat(el) }) :\r\n      Array.isArray(source) ?\r\n        source :\r\n      typeof source == 'object' ?\r\n        [source.x, source.y, source.width, source.height] :\r\n      arguments.length == 4 ?\r\n        [].slice.call(arguments) :\r\n        base\r\n\r\n      this.x = source[0]\r\n      this.y = source[1]\r\n      this.width = source[2]\r\n      this.height = source[3]\r\n    }\r\n\r\n\r\n  }\r\n\r\n, extend: {\r\n\r\n    toString: function() {\r\n      return this.x + ' ' + this.y + ' ' + this.width + ' ' + this.height\r\n    }\r\n  , morph: function(x, y, width, height){\r\n      this.destination = new SVG.ViewBox(x, y, width, height)\r\n      return this\r\n    }\r\n\r\n  , at: function(pos) {\r\n\r\n      if(!this.destination) return this\r\n\r\n      return new SVG.ViewBox([\r\n          this.x + (this.destination.x - this.x) * pos\r\n        , this.y + (this.destination.y - this.y) * pos\r\n        , this.width + (this.destination.width - this.width) * pos\r\n        , this.height + (this.destination.height - this.height) * pos\r\n      ])\r\n\r\n    }\r\n\r\n  }\r\n\r\n  // Define parent\r\n, parent: SVG.Container\r\n\r\n  // Add parent method\r\n, construct: {\r\n\r\n    // get/set viewbox\r\n    viewbox: function(x, y, width, height) {\r\n      if (arguments.length == 0)\r\n        // act as a getter if there are no arguments\r\n        return new SVG.ViewBox(this)\r\n\r\n      // otherwise act as a setter\r\n      return this.attr('viewBox', new SVG.ViewBox(x, y, width, height))\r\n    }\r\n\r\n  }\r\n\r\n})\n// Add events to elements\r\n;[  'click'\r\n  , 'dblclick'\r\n  , 'mousedown'\r\n  , 'mouseup'\r\n  , 'mouseover'\r\n  , 'mouseout'\r\n  , 'mousemove'\r\n  // , 'mouseenter' -> not supported by IE\r\n  // , 'mouseleave' -> not supported by IE\r\n  , 'touchstart'\r\n  , 'touchmove'\r\n  , 'touchleave'\r\n  , 'touchend'\r\n  , 'touchcancel' ].forEach(function(event) {\r\n\r\n  // add event to SVG.Element\r\n  SVG.Element.prototype[event] = function(f) {\r\n    // bind event to element rather than element node\r\n    SVG.on(this.node, event, f)\r\n    return this\r\n  }\r\n})\r\n\r\n// Initialize listeners stack\r\nSVG.listeners = []\r\nSVG.handlerMap = []\r\nSVG.listenerId = 0\r\n\r\n// Add event binder in the SVG namespace\r\nSVG.on = function(node, event, listener, binding, options) {\r\n  // create listener, get object-index\r\n  var l     = listener.bind(binding || node.instance || node)\r\n    , index = (SVG.handlerMap.indexOf(node) + 1 || SVG.handlerMap.push(node)) - 1\r\n    , ev    = event.split('.')[0]\r\n    , ns    = event.split('.')[1] || '*'\r\n\r\n\r\n  // ensure valid object\r\n  SVG.listeners[index]         = SVG.listeners[index]         || {}\r\n  SVG.listeners[index][ev]     = SVG.listeners[index][ev]     || {}\r\n  SVG.listeners[index][ev][ns] = SVG.listeners[index][ev][ns] || {}\r\n\r\n  if(!listener._svgjsListenerId)\r\n    listener._svgjsListenerId = ++SVG.listenerId\r\n\r\n  // reference listener\r\n  SVG.listeners[index][ev][ns][listener._svgjsListenerId] = l\r\n\r\n  // add listener\r\n  node.addEventListener(ev, l, options || false)\r\n}\r\n\r\n// Add event unbinder in the SVG namespace\r\nSVG.off = function(node, event, listener) {\r\n  var index = SVG.handlerMap.indexOf(node)\r\n    , ev    = event && event.split('.')[0]\r\n    , ns    = event && event.split('.')[1]\r\n    , namespace = ''\r\n\r\n  if(index == -1) return\r\n\r\n  if (listener) {\r\n    if(typeof listener == 'function') listener = listener._svgjsListenerId\r\n    if(!listener) return\r\n\r\n    // remove listener reference\r\n    if (SVG.listeners[index][ev] && SVG.listeners[index][ev][ns || '*']) {\r\n      // remove listener\r\n      node.removeEventListener(ev, SVG.listeners[index][ev][ns || '*'][listener], false)\r\n\r\n      delete SVG.listeners[index][ev][ns || '*'][listener]\r\n    }\r\n\r\n  } else if (ns && ev) {\r\n    // remove all listeners for a namespaced event\r\n    if (SVG.listeners[index][ev] && SVG.listeners[index][ev][ns]) {\r\n      for (listener in SVG.listeners[index][ev][ns])\r\n        SVG.off(node, [ev, ns].join('.'), listener)\r\n\r\n      delete SVG.listeners[index][ev][ns]\r\n    }\r\n\r\n  } else if (ns){\r\n    // remove all listeners for a specific namespace\r\n    for(event in SVG.listeners[index]){\r\n        for(namespace in SVG.listeners[index][event]){\r\n            if(ns === namespace){\r\n                SVG.off(node, [event, ns].join('.'))\r\n            }\r\n        }\r\n    }\r\n\r\n  } else if (ev) {\r\n    // remove all listeners for the event\r\n    if (SVG.listeners[index][ev]) {\r\n      for (namespace in SVG.listeners[index][ev])\r\n        SVG.off(node, [ev, namespace].join('.'))\r\n\r\n      delete SVG.listeners[index][ev]\r\n    }\r\n\r\n  } else {\r\n    // remove all listeners on a given node\r\n    for (event in SVG.listeners[index])\r\n      SVG.off(node, event)\r\n\r\n    delete SVG.listeners[index]\r\n    delete SVG.handlerMap[index]\r\n\r\n  }\r\n}\r\n\r\n//\r\nSVG.extend(SVG.Element, {\r\n  // Bind given event to listener\r\n  on: function(event, listener, binding, options) {\r\n    SVG.on(this.node, event, listener, binding, options)\r\n\r\n    return this\r\n  }\r\n  // Unbind event from listener\r\n, off: function(event, listener) {\r\n    SVG.off(this.node, event, listener)\r\n\r\n    return this\r\n  }\r\n  // Fire given event\r\n, fire: function(event, data) {\r\n\r\n    // Dispatch event\r\n    if(event instanceof window.Event){\r\n        this.node.dispatchEvent(event)\r\n    }else{\r\n        this.node.dispatchEvent(event = new window.CustomEvent(event, {detail:data, cancelable: true}))\r\n    }\r\n\r\n    this._event = event\r\n    return this\r\n  }\r\n, event: function() {\r\n    return this._event\r\n  }\r\n})\r\n\n\r\nSVG.Defs = SVG.invent({\r\n  // Initialize node\r\n  create: 'defs'\r\n\r\n  // Inherit from\r\n, inherit: SVG.Container\r\n\r\n})\nSVG.G = SVG.invent({\r\n  // Initialize node\r\n  create: 'g'\r\n\r\n  // Inherit from\r\n, inherit: SVG.Container\r\n\r\n  // Add class methods\r\n, extend: {\r\n    // Move over x-axis\r\n    x: function(x) {\r\n      return x == null ? this.transform('x') : this.transform({ x: x - this.x() }, true)\r\n    }\r\n    // Move over y-axis\r\n  , y: function(y) {\r\n      return y == null ? this.transform('y') : this.transform({ y: y - this.y() }, true)\r\n    }\r\n    // Move by center over x-axis\r\n  , cx: function(x) {\r\n      return x == null ? this.gbox().cx : this.x(x - this.gbox().width / 2)\r\n    }\r\n    // Move by center over y-axis\r\n  , cy: function(y) {\r\n      return y == null ? this.gbox().cy : this.y(y - this.gbox().height / 2)\r\n    }\r\n  , gbox: function() {\r\n\r\n      var bbox  = this.bbox()\r\n        , trans = this.transform()\r\n\r\n      bbox.x  += trans.x\r\n      bbox.x2 += trans.x\r\n      bbox.cx += trans.x\r\n\r\n      bbox.y  += trans.y\r\n      bbox.y2 += trans.y\r\n      bbox.cy += trans.y\r\n\r\n      return bbox\r\n    }\r\n  }\r\n\r\n  // Add parent method\r\n, construct: {\r\n    // Create a group element\r\n    group: function() {\r\n      return this.put(new SVG.G)\r\n    }\r\n  }\r\n})\r\n\n// ### This module adds backward / forward functionality to elements.\r\n\r\n//\r\nSVG.extend(SVG.Element, {\r\n  // Get all siblings, including myself\r\n  siblings: function() {\r\n    return this.parent().children()\r\n  }\r\n  // Get the curent position siblings\r\n, position: function() {\r\n    return this.parent().index(this)\r\n  }\r\n  // Get the next element (will return null if there is none)\r\n, next: function() {\r\n    return this.siblings()[this.position() + 1]\r\n  }\r\n  // Get the next element (will return null if there is none)\r\n, previous: function() {\r\n    return this.siblings()[this.position() - 1]\r\n  }\r\n  // Send given element one step forward\r\n, forward: function() {\r\n    var i = this.position() + 1\r\n      , p = this.parent()\r\n\r\n    // move node one step forward\r\n    p.removeElement(this).add(this, i)\r\n\r\n    // make sure defs node is always at the top\r\n    if (p instanceof SVG.Doc)\r\n      p.node.appendChild(p.defs().node)\r\n\r\n    return this\r\n  }\r\n  // Send given element one step backward\r\n, backward: function() {\r\n    var i = this.position()\r\n\r\n    if (i > 0)\r\n      this.parent().removeElement(this).add(this, i - 1)\r\n\r\n    return this\r\n  }\r\n  // Send given element all the way to the front\r\n, front: function() {\r\n    var p = this.parent()\r\n\r\n    // Move node forward\r\n    p.node.appendChild(this.node)\r\n\r\n    // Make sure defs node is always at the top\r\n    if (p instanceof SVG.Doc)\r\n      p.node.appendChild(p.defs().node)\r\n\r\n    return this\r\n  }\r\n  // Send given element all the way to the back\r\n, back: function() {\r\n    if (this.position() > 0)\r\n      this.parent().removeElement(this).add(this, 0)\r\n\r\n    return this\r\n  }\r\n  // Inserts a given element before the targeted element\r\n, before: function(element) {\r\n    element.remove()\r\n\r\n    var i = this.position()\r\n\r\n    this.parent().add(element, i)\r\n\r\n    return this\r\n  }\r\n  // Insters a given element after the targeted element\r\n, after: function(element) {\r\n    element.remove()\r\n\r\n    var i = this.position()\r\n\r\n    this.parent().add(element, i + 1)\r\n\r\n    return this\r\n  }\r\n\r\n})\nSVG.Mask = SVG.invent({\r\n  // Initialize node\r\n  create: function() {\r\n    this.constructor.call(this, SVG.create('mask'))\r\n\r\n    // keep references to masked elements\r\n    this.targets = []\r\n  }\r\n\r\n  // Inherit from\r\n, inherit: SVG.Container\r\n\r\n  // Add class methods\r\n, extend: {\r\n    // Unmask all masked elements and remove itself\r\n    remove: function() {\r\n      // unmask all targets\r\n      for (var i = this.targets.length - 1; i >= 0; i--)\r\n        if (this.targets[i])\r\n          this.targets[i].unmask()\r\n      this.targets = []\r\n\r\n      // remove mask from parent\r\n      this.parent().removeElement(this)\r\n\r\n      return this\r\n    }\r\n  }\r\n\r\n  // Add parent method\r\n, construct: {\r\n    // Create masking element\r\n    mask: function() {\r\n      return this.defs().put(new SVG.Mask)\r\n    }\r\n  }\r\n})\r\n\r\n\r\nSVG.extend(SVG.Element, {\r\n  // Distribute mask to svg element\r\n  maskWith: function(element) {\r\n    // use given mask or create a new one\r\n    this.masker = element instanceof SVG.Mask ? element : this.parent().mask().add(element)\r\n\r\n    // store reverence on self in mask\r\n    this.masker.targets.push(this)\r\n\r\n    // apply mask\r\n    return this.attr('mask', 'url(\"#' + this.masker.attr('id') + '\")')\r\n  }\r\n  // Unmask element\r\n, unmask: function() {\r\n    delete this.masker\r\n    return this.attr('mask', null)\r\n  }\r\n\r\n})\r\n\nSVG.ClipPath = SVG.invent({\r\n  // Initialize node\r\n  create: function() {\r\n    this.constructor.call(this, SVG.create('clipPath'))\r\n\r\n    // keep references to clipped elements\r\n    this.targets = []\r\n  }\r\n\r\n  // Inherit from\r\n, inherit: SVG.Container\r\n\r\n  // Add class methods\r\n, extend: {\r\n    // Unclip all clipped elements and remove itself\r\n    remove: function() {\r\n      // unclip all targets\r\n      for (var i = this.targets.length - 1; i >= 0; i--)\r\n        if (this.targets[i])\r\n          this.targets[i].unclip()\r\n      this.targets = []\r\n\r\n      // remove clipPath from parent\r\n      this.parent().removeElement(this)\r\n\r\n      return this\r\n    }\r\n  }\r\n\r\n  // Add parent method\r\n, construct: {\r\n    // Create clipping element\r\n    clip: function() {\r\n      return this.defs().put(new SVG.ClipPath)\r\n    }\r\n  }\r\n})\r\n\r\n//\r\nSVG.extend(SVG.Element, {\r\n  // Distribute clipPath to svg element\r\n  clipWith: function(element) {\r\n    // use given clip or create a new one\r\n    this.clipper = element instanceof SVG.ClipPath ? element : this.parent().clip().add(element)\r\n\r\n    // store reverence on self in mask\r\n    this.clipper.targets.push(this)\r\n\r\n    // apply mask\r\n    return this.attr('clip-path', 'url(\"#' + this.clipper.attr('id') + '\")')\r\n  }\r\n  // Unclip element\r\n, unclip: function() {\r\n    delete this.clipper\r\n    return this.attr('clip-path', null)\r\n  }\r\n\r\n})\nSVG.Gradient = SVG.invent({\r\n  // Initialize node\r\n  create: function(type) {\r\n    this.constructor.call(this, SVG.create(type + 'Gradient'))\r\n\r\n    // store type\r\n    this.type = type\r\n  }\r\n\r\n  // Inherit from\r\n, inherit: SVG.Container\r\n\r\n  // Add class methods\r\n, extend: {\r\n    // Add a color stop\r\n    at: function(offset, color, opacity) {\r\n      return this.put(new SVG.Stop).update(offset, color, opacity)\r\n    }\r\n    // Update gradient\r\n  , update: function(block) {\r\n      // remove all stops\r\n      this.clear()\r\n\r\n      // invoke passed block\r\n      if (typeof block == 'function')\r\n        block.call(this, this)\r\n\r\n      return this\r\n    }\r\n    // Return the fill id\r\n  , fill: function() {\r\n      return 'url(#' + this.id() + ')'\r\n    }\r\n    // Alias string convertion to fill\r\n  , toString: function() {\r\n      return this.fill()\r\n    }\r\n    // custom attr to handle transform\r\n  , attr: function(a, b, c) {\r\n      if(a == 'transform') a = 'gradientTransform'\r\n      return SVG.Container.prototype.attr.call(this, a, b, c)\r\n    }\r\n  }\r\n\r\n  // Add parent method\r\n, construct: {\r\n    // Create gradient element in defs\r\n    gradient: function(type, block) {\r\n      return this.defs().gradient(type, block)\r\n    }\r\n  }\r\n})\r\n\r\n// Add animatable methods to both gradient and fx module\r\nSVG.extend(SVG.Gradient, SVG.FX, {\r\n  // From position\r\n  from: function(x, y) {\r\n    return (this._target || this).type == 'radial' ?\r\n      this.attr({ fx: new SVG.Number(x), fy: new SVG.Number(y) }) :\r\n      this.attr({ x1: new SVG.Number(x), y1: new SVG.Number(y) })\r\n  }\r\n  // To position\r\n, to: function(x, y) {\r\n    return (this._target || this).type == 'radial' ?\r\n      this.attr({ cx: new SVG.Number(x), cy: new SVG.Number(y) }) :\r\n      this.attr({ x2: new SVG.Number(x), y2: new SVG.Number(y) })\r\n  }\r\n})\r\n\r\n// Base gradient generation\r\nSVG.extend(SVG.Defs, {\r\n  // define gradient\r\n  gradient: function(type, block) {\r\n    return this.put(new SVG.Gradient(type)).update(block)\r\n  }\r\n\r\n})\r\n\r\nSVG.Stop = SVG.invent({\r\n  // Initialize node\r\n  create: 'stop'\r\n\r\n  // Inherit from\r\n, inherit: SVG.Element\r\n\r\n  // Add class methods\r\n, extend: {\r\n    // add color stops\r\n    update: function(o) {\r\n      if (typeof o == 'number' || o instanceof SVG.Number) {\r\n        o = {\r\n          offset:  arguments[0]\r\n        , color:   arguments[1]\r\n        , opacity: arguments[2]\r\n        }\r\n      }\r\n\r\n      // set attributes\r\n      if (o.opacity != null) this.attr('stop-opacity', o.opacity)\r\n      if (o.color   != null) this.attr('stop-color', o.color)\r\n      if (o.offset  != null) this.attr('offset', new SVG.Number(o.offset))\r\n\r\n      return this\r\n    }\r\n  }\r\n\r\n})\r\n\nSVG.Pattern = SVG.invent({\r\n  // Initialize node\r\n  create: 'pattern'\r\n\r\n  // Inherit from\r\n, inherit: SVG.Container\r\n\r\n  // Add class methods\r\n, extend: {\r\n    // Return the fill id\r\n    fill: function() {\r\n      return 'url(#' + this.id() + ')'\r\n    }\r\n    // Update pattern by rebuilding\r\n  , update: function(block) {\r\n      // remove content\r\n      this.clear()\r\n\r\n      // invoke passed block\r\n      if (typeof block == 'function')\r\n        block.call(this, this)\r\n\r\n      return this\r\n    }\r\n    // Alias string convertion to fill\r\n  , toString: function() {\r\n      return this.fill()\r\n    }\r\n    // custom attr to handle transform\r\n  , attr: function(a, b, c) {\r\n      if(a == 'transform') a = 'patternTransform'\r\n      return SVG.Container.prototype.attr.call(this, a, b, c)\r\n    }\r\n\r\n  }\r\n\r\n  // Add parent method\r\n, construct: {\r\n    // Create pattern element in defs\r\n    pattern: function(width, height, block) {\r\n      return this.defs().pattern(width, height, block)\r\n    }\r\n  }\r\n})\r\n\r\nSVG.extend(SVG.Defs, {\r\n  // Define gradient\r\n  pattern: function(width, height, block) {\r\n    return this.put(new SVG.Pattern).update(block).attr({\r\n      x:            0\r\n    , y:            0\r\n    , width:        width\r\n    , height:       height\r\n    , patternUnits: 'userSpaceOnUse'\r\n    })\r\n  }\r\n\r\n})\nSVG.Doc = SVG.invent({\r\n  // Initialize node\r\n  create: function(element) {\r\n    if (element) {\r\n      // ensure the presence of a dom element\r\n      element = typeof element == 'string' ?\r\n        document.getElementById(element) :\r\n        element\r\n\r\n      // If the target is an svg element, use that element as the main wrapper.\r\n      // This allows svg.js to work with svg documents as well.\r\n      if (element.nodeName == 'svg') {\r\n        this.constructor.call(this, element)\r\n      } else {\r\n        this.constructor.call(this, SVG.create('svg'))\r\n        element.appendChild(this.node)\r\n        this.size('100%', '100%')\r\n      }\r\n\r\n      // set svg element attributes and ensure defs node\r\n      this.namespace().defs()\r\n    }\r\n  }\r\n\r\n  // Inherit from\r\n, inherit: SVG.Container\r\n\r\n  // Add class methods\r\n, extend: {\r\n    // Add namespaces\r\n    namespace: function() {\r\n      return this\r\n        .attr({ xmlns: SVG.ns, version: '1.1' })\r\n        .attr('xmlns:xlink', SVG.xlink, SVG.xmlns)\r\n        .attr('xmlns:svgjs', SVG.svgjs, SVG.xmlns)\r\n    }\r\n    // Creates and returns defs element\r\n  , defs: function() {\r\n      if (!this._defs) {\r\n        var defs\r\n\r\n        // Find or create a defs element in this instance\r\n        if (defs = this.node.getElementsByTagName('defs')[0])\r\n          this._defs = SVG.adopt(defs)\r\n        else\r\n          this._defs = new SVG.Defs\r\n\r\n        // Make sure the defs node is at the end of the stack\r\n        this.node.appendChild(this._defs.node)\r\n      }\r\n\r\n      return this._defs\r\n    }\r\n    // custom parent method\r\n  , parent: function() {\r\n      return this.node.parentNode.nodeName == '#document' ? null : this.node.parentNode\r\n    }\r\n    // Fix for possible sub-pixel offset. See:\r\n    // https://bugzilla.mozilla.org/show_bug.cgi?id=608812\r\n  , spof: function(spof) {\r\n      var pos = this.node.getScreenCTM()\r\n\r\n      if (pos)\r\n        this\r\n          .style('left', (-pos.e % 1) + 'px')\r\n          .style('top',  (-pos.f % 1) + 'px')\r\n\r\n      return this\r\n    }\r\n\r\n      // Removes the doc from the DOM\r\n  , remove: function() {\r\n      if(this.parent()) {\r\n        this.parent().removeChild(this.node)\r\n      }\r\n\r\n      return this\r\n    }\r\n  , clear: function() {\r\n      // remove children\r\n      while(this.node.hasChildNodes())\r\n        this.node.removeChild(this.node.lastChild)\r\n\r\n      // remove defs reference\r\n      delete this._defs\r\n\r\n      // add back parser\r\n      if(!SVG.parser.draw.parentNode)\r\n        this.node.appendChild(SVG.parser.draw)\r\n\r\n      return this\r\n    }\r\n  }\r\n\r\n})\r\n\nSVG.Shape = SVG.invent({\r\n  // Initialize node\r\n  create: function(element) {\r\n    this.constructor.call(this, element)\r\n  }\r\n\r\n  // Inherit from\r\n, inherit: SVG.Element\r\n\r\n})\n\r\nSVG.Bare = SVG.invent({\r\n  // Initialize\r\n  create: function(element, inherit) {\r\n    // construct element\r\n    this.constructor.call(this, SVG.create(element))\r\n\r\n    // inherit custom methods\r\n    if (inherit)\r\n      for (var method in inherit.prototype)\r\n        if (typeof inherit.prototype[method] === 'function')\r\n          this[method] = inherit.prototype[method]\r\n  }\r\n\r\n  // Inherit from\r\n, inherit: SVG.Element\r\n\r\n  // Add methods\r\n, extend: {\r\n    // Insert some plain text\r\n    words: function(text) {\r\n      // remove contents\r\n      while (this.node.hasChildNodes())\r\n        this.node.removeChild(this.node.lastChild)\r\n\r\n      // create text node\r\n      this.node.appendChild(document.createTextNode(text))\r\n\r\n      return this\r\n    }\r\n  }\r\n})\r\n\r\n\r\nSVG.extend(SVG.Parent, {\r\n  // Create an element that is not described by SVG.js\r\n  element: function(element, inherit) {\r\n    return this.put(new SVG.Bare(element, inherit))\r\n  }\r\n})\r\n\nSVG.Symbol = SVG.invent({\r\n  // Initialize node\r\n  create: 'symbol'\r\n\r\n  // Inherit from\r\n, inherit: SVG.Container\r\n\r\n, construct: {\r\n    // create symbol\r\n    symbol: function() {\r\n      return this.put(new SVG.Symbol)\r\n    }\r\n  }\r\n})\r\n\nSVG.Use = SVG.invent({\r\n  // Initialize node\r\n  create: 'use'\r\n\r\n  // Inherit from\r\n, inherit: SVG.Shape\r\n\r\n  // Add class methods\r\n, extend: {\r\n    // Use element as a reference\r\n    element: function(element, file) {\r\n      // Set lined element\r\n      return this.attr('href', (file || '') + '#' + element, SVG.xlink)\r\n    }\r\n  }\r\n\r\n  // Add parent method\r\n, construct: {\r\n    // Create a use element\r\n    use: function(element, file) {\r\n      return this.put(new SVG.Use).element(element, file)\r\n    }\r\n  }\r\n})\nSVG.Rect = SVG.invent({\r\n  // Initialize node\r\n  create: 'rect'\r\n\r\n  // Inherit from\r\n, inherit: SVG.Shape\r\n\r\n  // Add parent method\r\n, construct: {\r\n    // Create a rect element\r\n    rect: function(width, height) {\r\n      return this.put(new SVG.Rect()).size(width, height)\r\n    }\r\n  }\r\n})\nSVG.Circle = SVG.invent({\r\n  // Initialize node\r\n  create: 'circle'\r\n\r\n  // Inherit from\r\n, inherit: SVG.Shape\r\n\r\n  // Add parent method\r\n, construct: {\r\n    // Create circle element, based on ellipse\r\n    circle: function(size) {\r\n      return this.put(new SVG.Circle).rx(new SVG.Number(size).divide(2)).move(0, 0)\r\n    }\r\n  }\r\n})\r\n\r\nSVG.extend(SVG.Circle, SVG.FX, {\r\n  // Radius x value\r\n  rx: function(rx) {\r\n    return this.attr('r', rx)\r\n  }\r\n  // Alias radius x value\r\n, ry: function(ry) {\r\n    return this.rx(ry)\r\n  }\r\n})\r\n\r\nSVG.Ellipse = SVG.invent({\r\n  // Initialize node\r\n  create: 'ellipse'\r\n\r\n  // Inherit from\r\n, inherit: SVG.Shape\r\n\r\n  // Add parent method\r\n, construct: {\r\n    // Create an ellipse\r\n    ellipse: function(width, height) {\r\n      return this.put(new SVG.Ellipse).size(width, height).move(0, 0)\r\n    }\r\n  }\r\n})\r\n\r\nSVG.extend(SVG.Ellipse, SVG.Rect, SVG.FX, {\r\n  // Radius x value\r\n  rx: function(rx) {\r\n    return this.attr('rx', rx)\r\n  }\r\n  // Radius y value\r\n, ry: function(ry) {\r\n    return this.attr('ry', ry)\r\n  }\r\n})\r\n\r\n// Add common method\r\nSVG.extend(SVG.Circle, SVG.Ellipse, {\r\n    // Move over x-axis\r\n    x: function(x) {\r\n      return x == null ? this.cx() - this.rx() : this.cx(x + this.rx())\r\n    }\r\n    // Move over y-axis\r\n  , y: function(y) {\r\n      return y == null ? this.cy() - this.ry() : this.cy(y + this.ry())\r\n    }\r\n    // Move by center over x-axis\r\n  , cx: function(x) {\r\n      return x == null ? this.attr('cx') : this.attr('cx', x)\r\n    }\r\n    // Move by center over y-axis\r\n  , cy: function(y) {\r\n      return y == null ? this.attr('cy') : this.attr('cy', y)\r\n    }\r\n    // Set width of element\r\n  , width: function(width) {\r\n      return width == null ? this.rx() * 2 : this.rx(new SVG.Number(width).divide(2))\r\n    }\r\n    // Set height of element\r\n  , height: function(height) {\r\n      return height == null ? this.ry() * 2 : this.ry(new SVG.Number(height).divide(2))\r\n    }\r\n    // Custom size function\r\n  , size: function(width, height) {\r\n      var p = proportionalSize(this, width, height)\r\n\r\n      return this\r\n        .rx(new SVG.Number(p.width).divide(2))\r\n        .ry(new SVG.Number(p.height).divide(2))\r\n    }\r\n})\nSVG.Line = SVG.invent({\r\n  // Initialize node\r\n  create: 'line'\r\n\r\n  // Inherit from\r\n, inherit: SVG.Shape\r\n\r\n  // Add class methods\r\n, extend: {\r\n    // Get array\r\n    array: function() {\r\n      return new SVG.PointArray([\r\n        [ this.attr('x1'), this.attr('y1') ]\r\n      , [ this.attr('x2'), this.attr('y2') ]\r\n      ])\r\n    }\r\n    // Overwrite native plot() method\r\n  , plot: function(x1, y1, x2, y2) {\r\n      if (x1 == null)\r\n        return this.array()\r\n      else if (typeof y1 !== 'undefined')\r\n        x1 = { x1: x1, y1: y1, x2: x2, y2: y2 }\r\n      else\r\n        x1 = new SVG.PointArray(x1).toLine()\r\n\r\n      return this.attr(x1)\r\n    }\r\n    // Move by left top corner\r\n  , move: function(x, y) {\r\n      return this.attr(this.array().move(x, y).toLine())\r\n    }\r\n    // Set element size to given width and height\r\n  , size: function(width, height) {\r\n      var p = proportionalSize(this, width, height)\r\n\r\n      return this.attr(this.array().size(p.width, p.height).toLine())\r\n    }\r\n  }\r\n\r\n  // Add parent method\r\n, construct: {\r\n    // Create a line element\r\n    line: function(x1, y1, x2, y2) {\r\n      // make sure plot is called as a setter\r\n      // x1 is not necessarily a number, it can also be an array, a string and a SVG.PointArray\r\n      return SVG.Line.prototype.plot.apply(\r\n        this.put(new SVG.Line)\r\n      , x1 != null ? [x1, y1, x2, y2] : [0, 0, 0, 0]\r\n      )\r\n    }\r\n  }\r\n})\r\n\nSVG.Polyline = SVG.invent({\r\n  // Initialize node\r\n  create: 'polyline'\r\n\r\n  // Inherit from\r\n, inherit: SVG.Shape\r\n\r\n  // Add parent method\r\n, construct: {\r\n    // Create a wrapped polyline element\r\n    polyline: function(p) {\r\n      // make sure plot is called as a setter\r\n      return this.put(new SVG.Polyline).plot(p || new SVG.PointArray)\r\n    }\r\n  }\r\n})\r\n\r\nSVG.Polygon = SVG.invent({\r\n  // Initialize node\r\n  create: 'polygon'\r\n\r\n  // Inherit from\r\n, inherit: SVG.Shape\r\n\r\n  // Add parent method\r\n, construct: {\r\n    // Create a wrapped polygon element\r\n    polygon: function(p) {\r\n      // make sure plot is called as a setter\r\n      return this.put(new SVG.Polygon).plot(p || new SVG.PointArray)\r\n    }\r\n  }\r\n})\r\n\r\n// Add polygon-specific functions\r\nSVG.extend(SVG.Polyline, SVG.Polygon, {\r\n  // Get array\r\n  array: function() {\r\n    return this._array || (this._array = new SVG.PointArray(this.attr('points')))\r\n  }\r\n  // Plot new path\r\n, plot: function(p) {\r\n    return (p == null) ?\r\n      this.array() :\r\n      this.clear().attr('points', typeof p == 'string' ? p : (this._array = new SVG.PointArray(p)))\r\n  }\r\n  // Clear array cache\r\n, clear: function() {\r\n    delete this._array\r\n    return this\r\n  }\r\n  // Move by left top corner\r\n, move: function(x, y) {\r\n    return this.attr('points', this.array().move(x, y))\r\n  }\r\n  // Set element size to given width and height\r\n, size: function(width, height) {\r\n    var p = proportionalSize(this, width, height)\r\n\r\n    return this.attr('points', this.array().size(p.width, p.height))\r\n  }\r\n\r\n})\r\n\n// unify all point to point elements\r\nSVG.extend(SVG.Line, SVG.Polyline, SVG.Polygon, {\r\n  // Define morphable array\r\n  morphArray:  SVG.PointArray\r\n  // Move by left top corner over x-axis\r\n, x: function(x) {\r\n    return x == null ? this.bbox().x : this.move(x, this.bbox().y)\r\n  }\r\n  // Move by left top corner over y-axis\r\n, y: function(y) {\r\n    return y == null ? this.bbox().y : this.move(this.bbox().x, y)\r\n  }\r\n  // Set width of element\r\n, width: function(width) {\r\n    var b = this.bbox()\r\n\r\n    return width == null ? b.width : this.size(width, b.height)\r\n  }\r\n  // Set height of element\r\n, height: function(height) {\r\n    var b = this.bbox()\r\n\r\n    return height == null ? b.height : this.size(b.width, height)\r\n  }\r\n})\nSVG.Path = SVG.invent({\r\n  // Initialize node\r\n  create: 'path'\r\n\r\n  // Inherit from\r\n, inherit: SVG.Shape\r\n\r\n  // Add class methods\r\n, extend: {\r\n    // Define morphable array\r\n    morphArray:  SVG.PathArray\r\n    // Get array\r\n  , array: function() {\r\n      return this._array || (this._array = new SVG.PathArray(this.attr('d')))\r\n    }\r\n    // Plot new path\r\n  , plot: function(d) {\r\n      return (d == null) ?\r\n        this.array() :\r\n        this.clear().attr('d', typeof d == 'string' ? d : (this._array = new SVG.PathArray(d)))\r\n    }\r\n    // Clear array cache\r\n  , clear: function() {\r\n      delete this._array\r\n      return this\r\n    }\r\n    // Move by left top corner\r\n  , move: function(x, y) {\r\n      return this.attr('d', this.array().move(x, y))\r\n    }\r\n    // Move by left top corner over x-axis\r\n  , x: function(x) {\r\n      return x == null ? this.bbox().x : this.move(x, this.bbox().y)\r\n    }\r\n    // Move by left top corner over y-axis\r\n  , y: function(y) {\r\n      return y == null ? this.bbox().y : this.move(this.bbox().x, y)\r\n    }\r\n    // Set element size to given width and height\r\n  , size: function(width, height) {\r\n      var p = proportionalSize(this, width, height)\r\n\r\n      return this.attr('d', this.array().size(p.width, p.height))\r\n    }\r\n    // Set width of element\r\n  , width: function(width) {\r\n      return width == null ? this.bbox().width : this.size(width, this.bbox().height)\r\n    }\r\n    // Set height of element\r\n  , height: function(height) {\r\n      return height == null ? this.bbox().height : this.size(this.bbox().width, height)\r\n    }\r\n\r\n  }\r\n\r\n  // Add parent method\r\n, construct: {\r\n    // Create a wrapped path element\r\n    path: function(d) {\r\n      // make sure plot is called as a setter\r\n      return this.put(new SVG.Path).plot(d || new SVG.PathArray)\r\n    }\r\n  }\r\n})\r\n\nSVG.Image = SVG.invent({\r\n  // Initialize node\r\n  create: 'image'\r\n\r\n  // Inherit from\r\n, inherit: SVG.Shape\r\n\r\n  // Add class methods\r\n, extend: {\r\n    // (re)load image\r\n    load: function(url) {\r\n      if (!url) return this\r\n\r\n      var self = this\r\n        , img  = new window.Image()\r\n\r\n      // preload image\r\n      SVG.on(img, 'load', function() {\r\n        var p = self.parent(SVG.Pattern)\r\n\r\n        if(p === null) return\r\n\r\n        // ensure image size\r\n        if (self.width() == 0 && self.height() == 0)\r\n          self.size(img.width, img.height)\r\n\r\n        // ensure pattern size if not set\r\n        if (p && p.width() == 0 && p.height() == 0)\r\n          p.size(self.width(), self.height())\r\n\r\n        // callback\r\n        if (typeof self._loaded === 'function')\r\n          self._loaded.call(self, {\r\n            width:  img.width\r\n          , height: img.height\r\n          , ratio:  img.width / img.height\r\n          , url:    url\r\n          })\r\n      })\r\n\r\n      SVG.on(img, 'error', function(e){\r\n        if (typeof self._error === 'function'){\r\n            self._error.call(self, e)\r\n        }\r\n      })\r\n\r\n      return this.attr('href', (img.src = this.src = url), SVG.xlink)\r\n    }\r\n    // Add loaded callback\r\n  , loaded: function(loaded) {\r\n      this._loaded = loaded\r\n      return this\r\n    }\r\n\r\n  , error: function(error) {\r\n      this._error = error\r\n      return this\r\n    }\r\n  }\r\n\r\n  // Add parent method\r\n, construct: {\r\n    // create image element, load image and set its size\r\n    image: function(source, width, height) {\r\n      return this.put(new SVG.Image).load(source).size(width || 0, height || width || 0)\r\n    }\r\n  }\r\n\r\n})\nSVG.Text = SVG.invent({\r\n  // Initialize node\r\n  create: function() {\r\n    this.constructor.call(this, SVG.create('text'))\r\n\r\n    this.dom.leading = new SVG.Number(1.3)    // store leading value for rebuilding\r\n    this._rebuild = true                      // enable automatic updating of dy values\r\n    this._build   = false                     // disable build mode for adding multiple lines\r\n\r\n    // set default font\r\n    this.attr('font-family', SVG.defaults.attrs['font-family'])\r\n  }\r\n\r\n  // Inherit from\r\n, inherit: SVG.Shape\r\n\r\n  // Add class methods\r\n, extend: {\r\n    // Move over x-axis\r\n    x: function(x) {\r\n      // act as getter\r\n      if (x == null)\r\n        return this.attr('x')\r\n\r\n      return this.attr('x', x)\r\n    }\r\n    // Move over y-axis\r\n  , y: function(y) {\r\n      var oy = this.attr('y')\r\n        , o  = typeof oy === 'number' ? oy - this.bbox().y : 0\r\n\r\n      // act as getter\r\n      if (y == null)\r\n        return typeof oy === 'number' ? oy - o : oy\r\n\r\n      return this.attr('y', typeof y === 'number' ? y + o : y)\r\n    }\r\n    // Move center over x-axis\r\n  , cx: function(x) {\r\n      return x == null ? this.bbox().cx : this.x(x - this.bbox().width / 2)\r\n    }\r\n    // Move center over y-axis\r\n  , cy: function(y) {\r\n      return y == null ? this.bbox().cy : this.y(y - this.bbox().height / 2)\r\n    }\r\n    // Set the text content\r\n  , text: function(text) {\r\n      // act as getter\r\n      if (typeof text === 'undefined'){\r\n        var text = ''\r\n        var children = this.node.childNodes\r\n        for(var i = 0, len = children.length; i < len; ++i){\r\n\r\n          // add newline if its not the first child and newLined is set to true\r\n          if(i != 0 && children[i].nodeType != 3 && SVG.adopt(children[i]).dom.newLined == true){\r\n            text += '\\n'\r\n          }\r\n\r\n          // add content of this node\r\n          text += children[i].textContent\r\n        }\r\n\r\n        return text\r\n      }\r\n\r\n      // remove existing content\r\n      this.clear().build(true)\r\n\r\n      if (typeof text === 'function') {\r\n        // call block\r\n        text.call(this, this)\r\n\r\n      } else {\r\n        // store text and make sure text is not blank\r\n        text = text.split('\\n')\r\n\r\n        // build new lines\r\n        for (var i = 0, il = text.length; i < il; i++)\r\n          this.tspan(text[i]).newLine()\r\n      }\r\n\r\n      // disable build mode and rebuild lines\r\n      return this.build(false).rebuild()\r\n    }\r\n    // Set font size\r\n  , size: function(size) {\r\n      return this.attr('font-size', size).rebuild()\r\n    }\r\n    // Set / get leading\r\n  , leading: function(value) {\r\n      // act as getter\r\n      if (value == null)\r\n        return this.dom.leading\r\n\r\n      // act as setter\r\n      this.dom.leading = new SVG.Number(value)\r\n\r\n      return this.rebuild()\r\n    }\r\n    // Get all the first level lines\r\n  , lines: function() {\r\n      var node = (this.textPath && this.textPath() || this).node\r\n\r\n      // filter tspans and map them to SVG.js instances\r\n      var lines = SVG.utils.map(SVG.utils.filterSVGElements(node.childNodes), function(el){\r\n        return SVG.adopt(el)\r\n      })\r\n\r\n      // return an instance of SVG.set\r\n      return new SVG.Set(lines)\r\n    }\r\n    // Rebuild appearance type\r\n  , rebuild: function(rebuild) {\r\n      // store new rebuild flag if given\r\n      if (typeof rebuild == 'boolean')\r\n        this._rebuild = rebuild\r\n\r\n      // define position of all lines\r\n      if (this._rebuild) {\r\n        var self = this\r\n          , blankLineOffset = 0\r\n          , dy = this.dom.leading * new SVG.Number(this.attr('font-size'))\r\n\r\n        this.lines().each(function() {\r\n          if (this.dom.newLined) {\r\n            if (!self.textPath())\r\n              this.attr('x', self.attr('x'))\r\n            if(this.text() == '\\n') {\r\n              blankLineOffset += dy\r\n            }else{\r\n              this.attr('dy', dy + blankLineOffset)\r\n              blankLineOffset = 0\r\n            }\r\n          }\r\n        })\r\n\r\n        this.fire('rebuild')\r\n      }\r\n\r\n      return this\r\n    }\r\n    // Enable / disable build mode\r\n  , build: function(build) {\r\n      this._build = !!build\r\n      return this\r\n    }\r\n    // overwrite method from parent to set data properly\r\n  , setData: function(o){\r\n      this.dom = o\r\n      this.dom.leading = new SVG.Number(o.leading || 1.3)\r\n      return this\r\n    }\r\n  }\r\n\r\n  // Add parent method\r\n, construct: {\r\n    // Create text element\r\n    text: function(text) {\r\n      return this.put(new SVG.Text).text(text)\r\n    }\r\n    // Create plain text element\r\n  , plain: function(text) {\r\n      return this.put(new SVG.Text).plain(text)\r\n    }\r\n  }\r\n\r\n})\r\n\r\nSVG.Tspan = SVG.invent({\r\n  // Initialize node\r\n  create: 'tspan'\r\n\r\n  // Inherit from\r\n, inherit: SVG.Shape\r\n\r\n  // Add class methods\r\n, extend: {\r\n    // Set text content\r\n    text: function(text) {\r\n      if(text == null) return this.node.textContent + (this.dom.newLined ? '\\n' : '')\r\n\r\n      typeof text === 'function' ? text.call(this, this) : this.plain(text)\r\n\r\n      return this\r\n    }\r\n    // Shortcut dx\r\n  , dx: function(dx) {\r\n      return this.attr('dx', dx)\r\n    }\r\n    // Shortcut dy\r\n  , dy: function(dy) {\r\n      return this.attr('dy', dy)\r\n    }\r\n    // Create new line\r\n  , newLine: function() {\r\n      // fetch text parent\r\n      var t = this.parent(SVG.Text)\r\n\r\n      // mark new line\r\n      this.dom.newLined = true\r\n\r\n      // apply new hy¡n\r\n      return this.dy(t.dom.leading * t.attr('font-size')).attr('x', t.x())\r\n    }\r\n  }\r\n\r\n})\r\n\r\nSVG.extend(SVG.Text, SVG.Tspan, {\r\n  // Create plain text node\r\n  plain: function(text) {\r\n    // clear if build mode is disabled\r\n    if (this._build === false)\r\n      this.clear()\r\n\r\n    // create text node\r\n    this.node.appendChild(document.createTextNode(text))\r\n\r\n    return this\r\n  }\r\n  // Create a tspan\r\n, tspan: function(text) {\r\n    var node  = (this.textPath && this.textPath() || this).node\r\n      , tspan = new SVG.Tspan\r\n\r\n    // clear if build mode is disabled\r\n    if (this._build === false)\r\n      this.clear()\r\n\r\n    // add new tspan\r\n    node.appendChild(tspan.node)\r\n\r\n    return tspan.text(text)\r\n  }\r\n  // Clear all lines\r\n, clear: function() {\r\n    var node = (this.textPath && this.textPath() || this).node\r\n\r\n    // remove existing child nodes\r\n    while (node.hasChildNodes())\r\n      node.removeChild(node.lastChild)\r\n\r\n    return this\r\n  }\r\n  // Get length of text element\r\n, length: function() {\r\n    return this.node.getComputedTextLength()\r\n  }\r\n})\r\n\nSVG.TextPath = SVG.invent({\r\n  // Initialize node\r\n  create: 'textPath'\r\n\r\n  // Inherit from\r\n, inherit: SVG.Parent\r\n\r\n  // Define parent class\r\n, parent: SVG.Text\r\n\r\n  // Add parent method\r\n, construct: {\r\n    morphArray: SVG.PathArray\r\n    // Create path for text to run on\r\n  , path: function(d) {\r\n      // create textPath element\r\n      var path  = new SVG.TextPath\r\n        , track = this.doc().defs().path(d)\r\n\r\n      // move lines to textpath\r\n      while (this.node.hasChildNodes())\r\n        path.node.appendChild(this.node.firstChild)\r\n\r\n      // add textPath element as child node\r\n      this.node.appendChild(path.node)\r\n\r\n      // link textPath to path and add content\r\n      path.attr('href', '#' + track, SVG.xlink)\r\n\r\n      return this\r\n    }\r\n    // return the array of the path track element\r\n  , array: function() {\r\n      var track = this.track()\r\n\r\n      return track ? track.array() : null\r\n    }\r\n    // Plot path if any\r\n  , plot: function(d) {\r\n      var track = this.track()\r\n        , pathArray = null\r\n\r\n      if (track) {\r\n        pathArray = track.plot(d)\r\n      }\r\n\r\n      return (d == null) ? pathArray : this\r\n    }\r\n    // Get the path track element\r\n  , track: function() {\r\n      var path = this.textPath()\r\n\r\n      if (path)\r\n        return path.reference('href')\r\n    }\r\n    // Get the textPath child\r\n  , textPath: function() {\r\n      if (this.node.firstChild && this.node.firstChild.nodeName == 'textPath')\r\n        return SVG.adopt(this.node.firstChild)\r\n    }\r\n  }\r\n})\r\n\nSVG.Nested = SVG.invent({\r\n  // Initialize node\r\n  create: function() {\r\n    this.constructor.call(this, SVG.create('svg'))\r\n\r\n    this.style('overflow', 'visible')\r\n  }\r\n\r\n  // Inherit from\r\n, inherit: SVG.Container\r\n\r\n  // Add parent method\r\n, construct: {\r\n    // Create nested svg document\r\n    nested: function() {\r\n      return this.put(new SVG.Nested)\r\n    }\r\n  }\r\n})\nSVG.A = SVG.invent({\r\n  // Initialize node\r\n  create: 'a'\r\n\r\n  // Inherit from\r\n, inherit: SVG.Container\r\n\r\n  // Add class methods\r\n, extend: {\r\n    // Link url\r\n    to: function(url) {\r\n      return this.attr('href', url, SVG.xlink)\r\n    }\r\n    // Link show attribute\r\n  , show: function(target) {\r\n      return this.attr('show', target, SVG.xlink)\r\n    }\r\n    // Link target attribute\r\n  , target: function(target) {\r\n      return this.attr('target', target)\r\n    }\r\n  }\r\n\r\n  // Add parent method\r\n, construct: {\r\n    // Create a hyperlink element\r\n    link: function(url) {\r\n      return this.put(new SVG.A).to(url)\r\n    }\r\n  }\r\n})\r\n\r\nSVG.extend(SVG.Element, {\r\n  // Create a hyperlink element\r\n  linkTo: function(url) {\r\n    var link = new SVG.A\r\n\r\n    if (typeof url == 'function')\r\n      url.call(link, link)\r\n    else\r\n      link.to(url)\r\n\r\n    return this.parent().put(link).put(this)\r\n  }\r\n\r\n})\nSVG.Marker = SVG.invent({\r\n  // Initialize node\r\n  create: 'marker'\r\n\r\n  // Inherit from\r\n, inherit: SVG.Container\r\n\r\n  // Add class methods\r\n, extend: {\r\n    // Set width of element\r\n    width: function(width) {\r\n      return this.attr('markerWidth', width)\r\n    }\r\n    // Set height of element\r\n  , height: function(height) {\r\n      return this.attr('markerHeight', height)\r\n    }\r\n    // Set marker refX and refY\r\n  , ref: function(x, y) {\r\n      return this.attr('refX', x).attr('refY', y)\r\n    }\r\n    // Update marker\r\n  , update: function(block) {\r\n      // remove all content\r\n      this.clear()\r\n\r\n      // invoke passed block\r\n      if (typeof block == 'function')\r\n        block.call(this, this)\r\n\r\n      return this\r\n    }\r\n    // Return the fill id\r\n  , toString: function() {\r\n      return 'url(#' + this.id() + ')'\r\n    }\r\n  }\r\n\r\n  // Add parent method\r\n, construct: {\r\n    marker: function(width, height, block) {\r\n      // Create marker element in defs\r\n      return this.defs().marker(width, height, block)\r\n    }\r\n  }\r\n\r\n})\r\n\r\nSVG.extend(SVG.Defs, {\r\n  // Create marker\r\n  marker: function(width, height, block) {\r\n    // Set default viewbox to match the width and height, set ref to cx and cy and set orient to auto\r\n    return this.put(new SVG.Marker)\r\n      .size(width, height)\r\n      .ref(width / 2, height / 2)\r\n      .viewbox(0, 0, width, height)\r\n      .attr('orient', 'auto')\r\n      .update(block)\r\n  }\r\n\r\n})\r\n\r\nSVG.extend(SVG.Line, SVG.Polyline, SVG.Polygon, SVG.Path, {\r\n  // Create and attach markers\r\n  marker: function(marker, width, height, block) {\r\n    var attr = ['marker']\r\n\r\n    // Build attribute name\r\n    if (marker != 'all') attr.push(marker)\r\n    attr = attr.join('-')\r\n\r\n    // Set marker attribute\r\n    marker = arguments[1] instanceof SVG.Marker ?\r\n      arguments[1] :\r\n      this.doc().marker(width, height, block)\r\n\r\n    return this.attr(attr, marker)\r\n  }\r\n\r\n})\n// Define list of available attributes for stroke and fill\r\nvar sugar = {\r\n  stroke: ['color', 'width', 'opacity', 'linecap', 'linejoin', 'miterlimit', 'dasharray', 'dashoffset']\r\n, fill:   ['color', 'opacity', 'rule']\r\n, prefix: function(t, a) {\r\n    return a == 'color' ? t : t + '-' + a\r\n  }\r\n}\r\n\r\n// Add sugar for fill and stroke\r\n;['fill', 'stroke'].forEach(function(m) {\r\n  var i, extension = {}\r\n\r\n  extension[m] = function(o) {\r\n    if (typeof o == 'undefined')\r\n      return this\r\n    if (typeof o == 'string' || SVG.Color.isRgb(o) || (o && typeof o.fill === 'function'))\r\n      this.attr(m, o)\r\n\r\n    else\r\n      // set all attributes from sugar.fill and sugar.stroke list\r\n      for (i = sugar[m].length - 1; i >= 0; i--)\r\n        if (o[sugar[m][i]] != null)\r\n          this.attr(sugar.prefix(m, sugar[m][i]), o[sugar[m][i]])\r\n\r\n    return this\r\n  }\r\n\r\n  SVG.extend(SVG.Element, SVG.FX, extension)\r\n\r\n})\r\n\r\nSVG.extend(SVG.Element, SVG.FX, {\r\n  // Map rotation to transform\r\n  rotate: function(d, cx, cy) {\r\n    return this.transform({ rotation: d, cx: cx, cy: cy })\r\n  }\r\n  // Map skew to transform\r\n, skew: function(x, y, cx, cy) {\r\n    return arguments.length == 1  || arguments.length == 3 ?\r\n      this.transform({ skew: x, cx: y, cy: cx }) :\r\n      this.transform({ skewX: x, skewY: y, cx: cx, cy: cy })\r\n  }\r\n  // Map scale to transform\r\n, scale: function(x, y, cx, cy) {\r\n    return arguments.length == 1  || arguments.length == 3 ?\r\n      this.transform({ scale: x, cx: y, cy: cx }) :\r\n      this.transform({ scaleX: x, scaleY: y, cx: cx, cy: cy })\r\n  }\r\n  // Map translate to transform\r\n, translate: function(x, y) {\r\n    return this.transform({ x: x, y: y })\r\n  }\r\n  // Map flip to transform\r\n, flip: function(a, o) {\r\n    o = typeof a == 'number' ? a : o\r\n    return this.transform({ flip: a || 'both', offset: o })\r\n  }\r\n  // Map matrix to transform\r\n, matrix: function(m) {\r\n    return this.attr('transform', new SVG.Matrix(arguments.length == 6 ? [].slice.call(arguments) : m))\r\n  }\r\n  // Opacity\r\n, opacity: function(value) {\r\n    return this.attr('opacity', value)\r\n  }\r\n  // Relative move over x axis\r\n, dx: function(x) {\r\n    return this.x(new SVG.Number(x).plus(this instanceof SVG.FX ? 0 : this.x()), true)\r\n  }\r\n  // Relative move over y axis\r\n, dy: function(y) {\r\n    return this.y(new SVG.Number(y).plus(this instanceof SVG.FX ? 0 : this.y()), true)\r\n  }\r\n  // Relative move over x and y axes\r\n, dmove: function(x, y) {\r\n    return this.dx(x).dy(y)\r\n  }\r\n})\r\n\r\nSVG.extend(SVG.Rect, SVG.Ellipse, SVG.Circle, SVG.Gradient, SVG.FX, {\r\n  // Add x and y radius\r\n  radius: function(x, y) {\r\n    var type = (this._target || this).type;\r\n    return type == 'radial' || type == 'circle' ?\r\n      this.attr('r', new SVG.Number(x)) :\r\n      this.rx(x).ry(y == null ? x : y)\r\n  }\r\n})\r\n\r\nSVG.extend(SVG.Path, {\r\n  // Get path length\r\n  length: function() {\r\n    return this.node.getTotalLength()\r\n  }\r\n  // Get point at length\r\n, pointAt: function(length) {\r\n    return this.node.getPointAtLength(length)\r\n  }\r\n})\r\n\r\nSVG.extend(SVG.Parent, SVG.Text, SVG.Tspan, SVG.FX, {\r\n  // Set font\r\n  font: function(a, v) {\r\n    if (typeof a == 'object') {\r\n      for (v in a) this.font(v, a[v])\r\n    }\r\n\r\n    return a == 'leading' ?\r\n        this.leading(v) :\r\n      a == 'anchor' ?\r\n        this.attr('text-anchor', v) :\r\n      a == 'size' || a == 'family' || a == 'weight' || a == 'stretch' || a == 'variant' || a == 'style' ?\r\n        this.attr('font-'+ a, v) :\r\n        this.attr(a, v)\r\n  }\r\n})\r\n\nSVG.Set = SVG.invent({\r\n  // Initialize\r\n  create: function(members) {\r\n    // Set initial state\r\n    Array.isArray(members) ? this.members = members : this.clear()\r\n  }\r\n\r\n  // Add class methods\r\n, extend: {\r\n    // Add element to set\r\n    add: function() {\r\n      var i, il, elements = [].slice.call(arguments)\r\n\r\n      for (i = 0, il = elements.length; i < il; i++)\r\n        this.members.push(elements[i])\r\n\r\n      return this\r\n    }\r\n    // Remove element from set\r\n  , remove: function(element) {\r\n      var i = this.index(element)\r\n\r\n      // remove given child\r\n      if (i > -1)\r\n        this.members.splice(i, 1)\r\n\r\n      return this\r\n    }\r\n    // Iterate over all members\r\n  , each: function(block) {\r\n      for (var i = 0, il = this.members.length; i < il; i++)\r\n        block.apply(this.members[i], [i, this.members])\r\n\r\n      return this\r\n    }\r\n    // Restore to defaults\r\n  , clear: function() {\r\n      // initialize store\r\n      this.members = []\r\n\r\n      return this\r\n    }\r\n    // Get the length of a set\r\n  , length: function() {\r\n      return this.members.length\r\n    }\r\n    // Checks if a given element is present in set\r\n  , has: function(element) {\r\n      return this.index(element) >= 0\r\n    }\r\n    // retuns index of given element in set\r\n  , index: function(element) {\r\n      return this.members.indexOf(element)\r\n    }\r\n    // Get member at given index\r\n  , get: function(i) {\r\n      return this.members[i]\r\n    }\r\n    // Get first member\r\n  , first: function() {\r\n      return this.get(0)\r\n    }\r\n    // Get last member\r\n  , last: function() {\r\n      return this.get(this.members.length - 1)\r\n    }\r\n    // Default value\r\n  , valueOf: function() {\r\n      return this.members\r\n    }\r\n    // Get the bounding box of all members included or empty box if set has no items\r\n  , bbox: function(){\r\n      // return an empty box of there are no members\r\n      if (this.members.length == 0)\r\n        return new SVG.RBox()\r\n\r\n      // get the first rbox and update the target bbox\r\n      var rbox = this.members[0].rbox(this.members[0].doc())\r\n\r\n      this.each(function() {\r\n        // user rbox for correct position and visual representation\r\n        rbox = rbox.merge(this.rbox(this.doc()))\r\n      })\r\n\r\n      return rbox\r\n    }\r\n  }\r\n\r\n  // Add parent method\r\n, construct: {\r\n    // Create a new set\r\n    set: function(members) {\r\n      return new SVG.Set(members)\r\n    }\r\n  }\r\n})\r\n\r\nSVG.FX.Set = SVG.invent({\r\n  // Initialize node\r\n  create: function(set) {\r\n    // store reference to set\r\n    this.set = set\r\n  }\r\n\r\n})\r\n\r\n// Alias methods\r\nSVG.Set.inherit = function() {\r\n  var m\r\n    , methods = []\r\n\r\n  // gather shape methods\r\n  for(var m in SVG.Shape.prototype)\r\n    if (typeof SVG.Shape.prototype[m] == 'function' && typeof SVG.Set.prototype[m] != 'function')\r\n      methods.push(m)\r\n\r\n  // apply shape aliasses\r\n  methods.forEach(function(method) {\r\n    SVG.Set.prototype[method] = function() {\r\n      for (var i = 0, il = this.members.length; i < il; i++)\r\n        if (this.members[i] && typeof this.members[i][method] == 'function')\r\n          this.members[i][method].apply(this.members[i], arguments)\r\n\r\n      return method == 'animate' ? (this.fx || (this.fx = new SVG.FX.Set(this))) : this\r\n    }\r\n  })\r\n\r\n  // clear methods for the next round\r\n  methods = []\r\n\r\n  // gather fx methods\r\n  for(var m in SVG.FX.prototype)\r\n    if (typeof SVG.FX.prototype[m] == 'function' && typeof SVG.FX.Set.prototype[m] != 'function')\r\n      methods.push(m)\r\n\r\n  // apply fx aliasses\r\n  methods.forEach(function(method) {\r\n    SVG.FX.Set.prototype[method] = function() {\r\n      for (var i = 0, il = this.set.members.length; i < il; i++)\r\n        this.set.members[i].fx[method].apply(this.set.members[i].fx, arguments)\r\n\r\n      return this\r\n    }\r\n  })\r\n}\r\n\r\n\r\n\n\r\nSVG.extend(SVG.Element, {\r\n  // Store data values on svg nodes\r\n  data: function(a, v, r) {\r\n    if (typeof a == 'object') {\r\n      for (v in a)\r\n        this.data(v, a[v])\r\n\r\n    } else if (arguments.length < 2) {\r\n      try {\r\n        return JSON.parse(this.attr('data-' + a))\r\n      } catch(e) {\r\n        return this.attr('data-' + a)\r\n      }\r\n\r\n    } else {\r\n      this.attr(\r\n        'data-' + a\r\n      , v === null ?\r\n          null :\r\n        r === true || typeof v === 'string' || typeof v === 'number' ?\r\n          v :\r\n          JSON.stringify(v)\r\n      )\r\n    }\r\n\r\n    return this\r\n  }\r\n})\nSVG.extend(SVG.Element, {\r\n  // Remember arbitrary data\r\n  remember: function(k, v) {\r\n    // remember every item in an object individually\r\n    if (typeof arguments[0] == 'object')\r\n      for (var v in k)\r\n        this.remember(v, k[v])\r\n\r\n    // retrieve memory\r\n    else if (arguments.length == 1)\r\n      return this.memory()[k]\r\n\r\n    // store memory\r\n    else\r\n      this.memory()[k] = v\r\n\r\n    return this\r\n  }\r\n\r\n  // Erase a given memory\r\n, forget: function() {\r\n    if (arguments.length == 0)\r\n      this._memory = {}\r\n    else\r\n      for (var i = arguments.length - 1; i >= 0; i--)\r\n        delete this.memory()[arguments[i]]\r\n\r\n    return this\r\n  }\r\n\r\n  // Initialize or return local memory object\r\n, memory: function() {\r\n    return this._memory || (this._memory = {})\r\n  }\r\n\r\n})\n// Method for getting an element by id\r\nSVG.get = function(id) {\r\n  var node = document.getElementById(idFromReference(id) || id)\r\n  return SVG.adopt(node)\r\n}\r\n\r\n// Select elements by query string\r\nSVG.select = function(query, parent) {\r\n  return new SVG.Set(\r\n    SVG.utils.map((parent || document).querySelectorAll(query), function(node) {\r\n      return SVG.adopt(node)\r\n    })\r\n  )\r\n}\r\n\r\nSVG.extend(SVG.Parent, {\r\n  // Scoped select method\r\n  select: function(query) {\r\n    return SVG.select(query, this.node)\r\n  }\r\n\r\n})\nfunction pathRegReplace(a, b, c, d) {\r\n  return c + d.replace(SVG.regex.dots, ' .')\r\n}\r\n\r\n// creates deep clone of array\r\nfunction array_clone(arr){\r\n  var clone = arr.slice(0)\r\n  for(var i = clone.length; i--;){\r\n    if(Array.isArray(clone[i])){\r\n      clone[i] = array_clone(clone[i])\r\n    }\r\n  }\r\n  return clone\r\n}\r\n\r\n// tests if a given element is instance of an object\r\nfunction is(el, obj){\r\n  return el instanceof obj\r\n}\r\n\r\n// tests if a given selector matches an element\r\nfunction matches(el, selector) {\r\n  return (el.matches || el.matchesSelector || el.msMatchesSelector || el.mozMatchesSelector || el.webkitMatchesSelector || el.oMatchesSelector).call(el, selector);\r\n}\r\n\r\n// Convert dash-separated-string to camelCase\r\nfunction camelCase(s) {\r\n  return s.toLowerCase().replace(/-(.)/g, function(m, g) {\r\n    return g.toUpperCase()\r\n  })\r\n}\r\n\r\n// Capitalize first letter of a string\r\nfunction capitalize(s) {\r\n  return s.charAt(0).toUpperCase() + s.slice(1)\r\n}\r\n\r\n// Ensure to six-based hex\r\nfunction fullHex(hex) {\r\n  return hex.length == 4 ?\r\n    [ '#',\r\n      hex.substring(1, 2), hex.substring(1, 2)\r\n    , hex.substring(2, 3), hex.substring(2, 3)\r\n    , hex.substring(3, 4), hex.substring(3, 4)\r\n    ].join('') : hex\r\n}\r\n\r\n// Component to hex value\r\nfunction compToHex(comp) {\r\n  var hex = comp.toString(16)\r\n  return hex.length == 1 ? '0' + hex : hex\r\n}\r\n\r\n// Calculate proportional width and height values when necessary\r\nfunction proportionalSize(element, width, height) {\r\n  if (width == null || height == null) {\r\n    var box = element.bbox()\r\n\r\n    if (width == null)\r\n      width = box.width / box.height * height\r\n    else if (height == null)\r\n      height = box.height / box.width * width\r\n  }\r\n\r\n  return {\r\n    width:  width\r\n  , height: height\r\n  }\r\n}\r\n\r\n// Delta transform point\r\nfunction deltaTransformPoint(matrix, x, y) {\r\n  return {\r\n    x: x * matrix.a + y * matrix.c + 0\r\n  , y: x * matrix.b + y * matrix.d + 0\r\n  }\r\n}\r\n\r\n// Map matrix array to object\r\nfunction arrayToMatrix(a) {\r\n  return { a: a[0], b: a[1], c: a[2], d: a[3], e: a[4], f: a[5] }\r\n}\r\n\r\n// Parse matrix if required\r\nfunction parseMatrix(matrix) {\r\n  if (!(matrix instanceof SVG.Matrix))\r\n    matrix = new SVG.Matrix(matrix)\r\n\r\n  return matrix\r\n}\r\n\r\n// Add centre point to transform object\r\nfunction ensureCentre(o, target) {\r\n  o.cx = o.cx == null ? target.bbox().cx : o.cx\r\n  o.cy = o.cy == null ? target.bbox().cy : o.cy\r\n}\r\n\r\n// PathArray Helpers\r\nfunction arrayToString(a) {\r\n  for (var i = 0, il = a.length, s = ''; i < il; i++) {\r\n    s += a[i][0]\r\n\r\n    if (a[i][1] != null) {\r\n      s += a[i][1]\r\n\r\n      if (a[i][2] != null) {\r\n        s += ' '\r\n        s += a[i][2]\r\n\r\n        if (a[i][3] != null) {\r\n          s += ' '\r\n          s += a[i][3]\r\n          s += ' '\r\n          s += a[i][4]\r\n\r\n          if (a[i][5] != null) {\r\n            s += ' '\r\n            s += a[i][5]\r\n            s += ' '\r\n            s += a[i][6]\r\n\r\n            if (a[i][7] != null) {\r\n              s += ' '\r\n              s += a[i][7]\r\n            }\r\n          }\r\n        }\r\n      }\r\n    }\r\n  }\r\n\r\n  return s + ' '\r\n}\r\n\r\n// Deep new id assignment\r\nfunction assignNewId(node) {\r\n  // do the same for SVG child nodes as well\r\n  for (var i = node.childNodes.length - 1; i >= 0; i--)\r\n    if (node.childNodes[i] instanceof window.SVGElement)\r\n      assignNewId(node.childNodes[i])\r\n\r\n  return SVG.adopt(node).id(SVG.eid(node.nodeName))\r\n}\r\n\r\n// Add more bounding box properties\r\nfunction fullBox(b) {\r\n  if (b.x == null) {\r\n    b.x      = 0\r\n    b.y      = 0\r\n    b.width  = 0\r\n    b.height = 0\r\n  }\r\n\r\n  b.w  = b.width\r\n  b.h  = b.height\r\n  b.x2 = b.x + b.width\r\n  b.y2 = b.y + b.height\r\n  b.cx = b.x + b.width / 2\r\n  b.cy = b.y + b.height / 2\r\n\r\n  return b\r\n}\r\n\r\n// Get id from reference string\r\nfunction idFromReference(url) {\r\n  var m = url.toString().match(SVG.regex.reference)\r\n\r\n  if (m) return m[1]\r\n}\r\n\r\n// Create matrix array for looping\r\nvar abcdef = 'abcdef'.split('')\n// Add CustomEvent to IE9 and IE10\r\nif (typeof window.CustomEvent !== 'function') {\r\n  // Code from: https://developer.mozilla.org/en-US/docs/Web/API/CustomEvent\r\n  var CustomEvent = function(event, options) {\r\n    options = options || { bubbles: false, cancelable: false, detail: undefined }\r\n    var e = document.createEvent('CustomEvent')\r\n    e.initCustomEvent(event, options.bubbles, options.cancelable, options.detail)\r\n    return e\r\n  }\r\n\r\n  CustomEvent.prototype = window.Event.prototype\r\n\r\n  window.CustomEvent = CustomEvent\r\n}\r\n\r\n// requestAnimationFrame / cancelAnimationFrame Polyfill with fallback based on Paul Irish\r\n(function(w) {\r\n  var lastTime = 0\r\n  var vendors = ['moz', 'webkit']\r\n\r\n  for(var x = 0; x < vendors.length && !window.requestAnimationFrame; ++x) {\r\n    w.requestAnimationFrame = w[vendors[x] + 'RequestAnimationFrame']\r\n    w.cancelAnimationFrame  = w[vendors[x] + 'CancelAnimationFrame'] ||\r\n                              w[vendors[x] + 'CancelRequestAnimationFrame']\r\n  }\r\n\r\n  w.requestAnimationFrame = w.requestAnimationFrame ||\r\n    function(callback) {\r\n      var currTime = new Date().getTime()\r\n      var timeToCall = Math.max(0, 16 - (currTime - lastTime))\r\n\r\n      var id = w.setTimeout(function() {\r\n        callback(currTime + timeToCall)\r\n      }, timeToCall)\r\n\r\n      lastTime = currTime + timeToCall\r\n      return id\r\n    }\r\n\r\n  w.cancelAnimationFrame = w.cancelAnimationFrame || w.clearTimeout;\r\n\r\n}(window))\r\n\r\nreturn SVG\r\n\r\n}));\r\n\n\n//////////////////\n// WEBPACK FOOTER\n// ./node_modules/svgjs/dist/svg.js\n// module id = 1\n// module chunks = 0","\"use strict\";\nimport SVG from \"svgjs\";\nimport svgData from \"./gopher.svg\";\n\nfunction randomRange(min, max) {\n  return min + Math.random() * (max - min);\n}\n\nfunction Gopher(image) {\n  image.style.visibility = \"hidden\";\n  this.drawing = document.createElement(\"div\");\n  this.drawing.title = \"Go\";\n  this.drawing.className = \"tool\";\n  this.drawing.style.position = \"absolute\";\n  document.body.appendChild(this.drawing);\n\n  this.drawing.style.left = image.offsetLeft + \"px\";\n  this.drawing.style.top = image.offsetTop + \"px\";\n  window.addEventListener(\n    \"resize\",\n    function() {\n      this.drawing.style.left = image.offsetLeft + \"px\";\n      this.drawing.style.top = image.offsetTop + \"px\";\n    }.bind(this)\n  );\n\n  this.svg = SVG(this.drawing);\n  this.svg.svg(svgData);\n  this.svg.size(image.width, image.height);\n\n  this.gopher = this.svg.select(\"#Gopher\").get(0);\n\n  this.rightEye = this.svg.select(\"#rightsocket\").get(0);\n  this.rightPupil = this.svg.select(\"#rightpupil\").get(0);\n  this.leftEye = this.svg.select(\"#leftsocket\").get(0);\n  this.leftPupil = this.svg.select(\"#leftpupil\").get(0);\n  this.leftReflection = this.svg.select(\"#leftreflection\").get(0);\n  this.rightReflection = this.svg.select(\"#rightreflection\").get(0);\n  this.rightHand = this.svg.select(\"#righthand\").get(0);\n  this.staring = false;\n\n  this.llEyelid = this.leftEye\n    .parent()\n    .rect(this.leftEye.width(), this.leftEye.height() / 2)\n    .attr({fill: \"#8CC5E7\"})\n    .move(this.leftEye.x(), this.leftEye.cy() + 20)\n    .maskWith(this.leftEye.clone().attr({fill: \"#fff\"}));\n\n  this.ulEyelid = this.leftEye\n    .parent()\n    .rect(this.leftEye.width(), this.leftEye.height() / 2)\n    .attr({fill: \"#8CC5E7\"})\n    .move(this.leftEye.x(), this.leftEye.cy() - 70)\n    .maskWith(this.leftEye.clone().attr({fill: \"#fff\"}));\n\n  this.lrEyelid = this.rightEye\n    .parent()\n    .rect(this.rightEye.width(), this.rightEye.height() / 2)\n    .attr({fill: \"#8CC5E7\"})\n    .move(this.rightEye.x(), this.rightEye.cy() + 20)\n    .maskWith(this.rightEye.clone().attr({fill: \"#fff\"}));\n\n  this.urEyelid = this.rightEye\n    .parent()\n    .rect(this.rightEye.width(), this.rightEye.height() / 2)\n    .attr({fill: \"#8CC5E7\"})\n    .move(this.rightEye.x(), this.rightEye.cy() - 70)\n    .maskWith(this.rightEye.clone().attr({fill: \"#fff\"}));\n\n  this.drawing.addEventListener(\"click\", this.stare.bind(this));\n  window.addEventListener(\"mousemove\", this.handleMouseMove.bind(this));\n  this.startWave();\n  this.startTwitch();\n  this.startBlink();\n}\n\nGopher.prototype.twitch = function() {\n  var x = this.leftEye.x();\n  var y = this.leftEye.cy();\n  this.llEyelid\n    .finish()\n    .animate(100)\n    .move(x, y)\n    .animate(50)\n    .move(x, y + 5)\n    .animate(50)\n    .move(x, y)\n    .animate(50)\n    .move(x, y + 8)\n    .animate(50)\n    .move(x, y)\n    .animate(100)\n    .move(x, y + 20)\n    .after(\n      function() {\n        if (this.staring) {\n          this.llEyelid.animate(50).move(x, y + 5);\n        }\n      }.bind(this)\n    );\n};\n\nGopher.prototype.blink = function() {\n  var lx = this.leftEye.x();\n  var ly = this.leftEye.cy();\n  var rx = this.rightEye.x();\n  var ry = this.rightEye.cy();\n  this.staring = false;\n\n  this.llEyelid\n    .finish()\n    .animate(100)\n    .move(lx, ly)\n    .animate(100)\n    .move(lx, ly + 40);\n\n  this.ulEyelid\n    .finish()\n    .animate(100)\n    .move(lx, ly - 40)\n    .animate(100)\n    .move(lx, ly - 80);\n\n  this.lrEyelid\n    .finish()\n    .animate(100)\n    .move(rx, ry)\n    .animate(100)\n    .move(rx, ry + 40);\n\n  this.urEyelid\n    .finish()\n    .animate(100)\n    .move(rx, ry - 40)\n    .animate(100)\n    .move(rx, ry - 80);\n};\n\nGopher.prototype.stare = function() {\n  this.staring = true;\n  this.resetBlinkTimer();\n  var lx = this.leftEye.x();\n  var ly = this.leftEye.cy();\n  var rx = this.rightEye.x();\n  var ry = this.rightEye.cy();\n  this.moveEyes(this.leftEye.cx(), this.leftEye.cy());\n  this.llEyelid.animate(100).move(lx, ly + 5);\n  this.ulEyelid.animate(100).move(lx, ly - 50);\n  this.lrEyelid.animate(100).move(rx, ry + 5);\n  this.urEyelid.animate(100).move(rx, ry - 50);\n};\n\nGopher.prototype.wave = function(hand) {\n  var handX = this.rightHand.x();\n  var handY = this.rightHand.y();\n  this.moveEyes(this.leftEye.cx(), this.leftEye.cy());\n  this.rightHand\n    .finish()\n    .animate(300)\n    .rotate(-150, handX, handY)\n    .animate(200)\n    .rotate(-110, handX, handY)\n    .animate(200)\n    .rotate(-150, handX, handY)\n    .animate(300)\n    .rotate(-1, handX, handY);\n};\n\nGopher.prototype.handleMouseMove = function(event) {\n  // Calculate the position of the mouse in coordinates local to the SVG,\n  // rather than the global page coordinates.\n  var scaleX = this.gopher.viewbox().width / this.svg.viewbox().width;\n  var scaleY = this.gopher.viewbox().height / this.svg.viewbox().height;\n  var localX = (event.pageX - this.drawing.offsetLeft) * scaleX;\n  var localY = (event.pageY - this.drawing.offsetTop) * scaleY;\n\n  // Make the eyes look at the cursor if it's close enough.\n  if (\n    Math.abs(localX - this.leftEye.cx()) < 350 &&\n    Math.abs(localY - this.leftEye.cy()) < 350 &&\n    !this.staring\n  ) {\n    this.moveEyes(localX, localY);\n  }\n};\n\nGopher.prototype.moveEyes = function(targetX, targetY, dur) {\n  if (!dur) {\n    dur = 50;\n  }\n\n  var lcx = this.leftEye.cx();\n  var lcy = this.leftEye.cy();\n  var ldx = targetX - lcx;\n  var ldy = targetY - lcy;\n  var ll = Math.sqrt(ldx * ldx + ldy * ldy);\n  var lnx = ldx / ll;\n  var lny = ldy / ll;\n  if (ll === 0) {\n    lnx = 0;\n    lny = 0;\n  }\n\n  var rcx = this.rightEye.cx();\n  var rcy = this.rightEye.cy();\n  var rdx = targetX - rcx;\n  var rdy = targetY - rcy;\n  var rl = Math.sqrt(rdx * rdx + rdy * rdy);\n  var rnx = rdx / rl;\n  var rny = rdy / rl;\n  if (rl === 0) {\n    rnx = 0;\n    rny = 0;\n  }\n\n  this.leftPupil\n    .stop()\n    .animate(dur, \">\")\n    .center(lcx + lnx * 12, lcy + lny * 12);\n  this.rightPupil\n    .stop()\n    .animate(dur, \">\")\n    .center(rcx + rnx * 12, rcy + rny * 12);\n  this.leftReflection\n    .stop()\n    .animate(dur, \">\")\n    .center(lcx + lnx * 6, lcy + lny * 6);\n  this.rightReflection\n    .stop()\n    .animate(dur, \">\")\n    .center(rcx + rnx * 6, rcy + rny * 6);\n\n  if (this.moveEyesTimeout) {\n    clearTimeout(this.moveEyesTimeout);\n  }\n  this.moveEyesTimeout = setTimeout(this.moveEyesRandomly.bind(this), 2000);\n};\n\nGopher.prototype.moveEyesRandomly = function() {\n  var circleRadius = 400;\n  var randomAngle = randomRange(0, 2 * Math.PI);\n  var randomRadius = Math.sqrt(Math.random()) * circleRadius;\n  var x = Math.cos(randomAngle) * randomRadius;\n  var y = Math.sin(randomAngle) * randomRadius;\n  var dur = randomRange(5, 600);\n  if (!this.staring) {\n    this.moveEyes(x, y, dur);\n  }\n};\n\nGopher.prototype.startTwitch = function() {\n  this.twitch();\n  if (this.twitchTimeout) {\n    clearTimeout(this.twitchTimeout);\n  }\n  this.twitchTimeout = setTimeout(\n    this.startTwitch.bind(this),\n    randomRange(5000, 8000)\n  );\n};\n\nGopher.prototype.startBlink = function() {\n  this.blink();\n  this.resetBlinkTimer();\n};\n\nGopher.prototype.resetBlinkTimer = function() {\n  if (this.blinkTimeout) {\n    clearTimeout(this.blinkTimeout);\n  }\n  this.blinkTimeout = setTimeout(\n    this.startBlink.bind(this),\n    randomRange(5000, 8000)\n  );\n};\n\nGopher.prototype.startWave = function() {\n  if (!this.staring) {\n    this.wave();\n  }\n  if (this.waveTimeout) {\n    clearTimeout(this.waveTimeout);\n  }\n  var waveDelay = Math.floor(randomRange(3, 21) * 1000);\n  this.waveTimeout = setTimeout(this.startWave.bind(this), waveDelay);\n};\n\nwindow.addEventListener(\"load\", function() {\n  var image = document.querySelector(\"img[data-gopher]\");\n  if (image) {\n    new Gopher(image);\n  }\n});\n\n\n\n//////////////////\n// WEBPACK FOOTER\n// ./src/index.js\n// module id = 2\n// module chunks = 0"],"sourceRoot":""}